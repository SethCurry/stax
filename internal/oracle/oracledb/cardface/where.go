// Code generated by ent, DO NOT EDIT.

package cardface

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/SethCurry/stax/internal/oracle/oracledb/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CardFace {
	return predicate.CardFace(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CardFace {
	return predicate.CardFace(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CardFace {
	return predicate.CardFace(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CardFace {
	return predicate.CardFace(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CardFace {
	return predicate.CardFace(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CardFace {
	return predicate.CardFace(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CardFace {
	return predicate.CardFace(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CardFace {
	return predicate.CardFace(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CardFace {
	return predicate.CardFace(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldEQ(FieldName, v))
}

// FlavorText applies equality check predicate on the "flavor_text" field. It's identical to FlavorTextEQ.
func FlavorText(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldEQ(FieldFlavorText, v))
}

// OracleText applies equality check predicate on the "oracle_text" field. It's identical to OracleTextEQ.
func OracleText(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldEQ(FieldOracleText, v))
}

// Language applies equality check predicate on the "language" field. It's identical to LanguageEQ.
func Language(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldEQ(FieldLanguage, v))
}

// Cmc applies equality check predicate on the "cmc" field. It's identical to CmcEQ.
func Cmc(v float32) predicate.CardFace {
	return predicate.CardFace(sql.FieldEQ(FieldCmc, v))
}

// Power applies equality check predicate on the "power" field. It's identical to PowerEQ.
func Power(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldEQ(FieldPower, v))
}

// Toughness applies equality check predicate on the "toughness" field. It's identical to ToughnessEQ.
func Toughness(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldEQ(FieldToughness, v))
}

// Loyalty applies equality check predicate on the "loyalty" field. It's identical to LoyaltyEQ.
func Loyalty(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldEQ(FieldLoyalty, v))
}

// ManaCost applies equality check predicate on the "mana_cost" field. It's identical to ManaCostEQ.
func ManaCost(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldEQ(FieldManaCost, v))
}

// TypeLine applies equality check predicate on the "type_line" field. It's identical to TypeLineEQ.
func TypeLine(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldEQ(FieldTypeLine, v))
}

// Colors applies equality check predicate on the "colors" field. It's identical to ColorsEQ.
func Colors(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldEQ(FieldColors, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.CardFace {
	return predicate.CardFace(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.CardFace {
	return predicate.CardFace(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldContainsFold(FieldName, v))
}

// FlavorTextEQ applies the EQ predicate on the "flavor_text" field.
func FlavorTextEQ(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldEQ(FieldFlavorText, v))
}

// FlavorTextNEQ applies the NEQ predicate on the "flavor_text" field.
func FlavorTextNEQ(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldNEQ(FieldFlavorText, v))
}

// FlavorTextIn applies the In predicate on the "flavor_text" field.
func FlavorTextIn(vs ...string) predicate.CardFace {
	return predicate.CardFace(sql.FieldIn(FieldFlavorText, vs...))
}

// FlavorTextNotIn applies the NotIn predicate on the "flavor_text" field.
func FlavorTextNotIn(vs ...string) predicate.CardFace {
	return predicate.CardFace(sql.FieldNotIn(FieldFlavorText, vs...))
}

// FlavorTextGT applies the GT predicate on the "flavor_text" field.
func FlavorTextGT(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldGT(FieldFlavorText, v))
}

// FlavorTextGTE applies the GTE predicate on the "flavor_text" field.
func FlavorTextGTE(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldGTE(FieldFlavorText, v))
}

// FlavorTextLT applies the LT predicate on the "flavor_text" field.
func FlavorTextLT(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldLT(FieldFlavorText, v))
}

// FlavorTextLTE applies the LTE predicate on the "flavor_text" field.
func FlavorTextLTE(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldLTE(FieldFlavorText, v))
}

// FlavorTextContains applies the Contains predicate on the "flavor_text" field.
func FlavorTextContains(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldContains(FieldFlavorText, v))
}

// FlavorTextHasPrefix applies the HasPrefix predicate on the "flavor_text" field.
func FlavorTextHasPrefix(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldHasPrefix(FieldFlavorText, v))
}

// FlavorTextHasSuffix applies the HasSuffix predicate on the "flavor_text" field.
func FlavorTextHasSuffix(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldHasSuffix(FieldFlavorText, v))
}

// FlavorTextEqualFold applies the EqualFold predicate on the "flavor_text" field.
func FlavorTextEqualFold(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldEqualFold(FieldFlavorText, v))
}

// FlavorTextContainsFold applies the ContainsFold predicate on the "flavor_text" field.
func FlavorTextContainsFold(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldContainsFold(FieldFlavorText, v))
}

// OracleTextEQ applies the EQ predicate on the "oracle_text" field.
func OracleTextEQ(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldEQ(FieldOracleText, v))
}

// OracleTextNEQ applies the NEQ predicate on the "oracle_text" field.
func OracleTextNEQ(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldNEQ(FieldOracleText, v))
}

// OracleTextIn applies the In predicate on the "oracle_text" field.
func OracleTextIn(vs ...string) predicate.CardFace {
	return predicate.CardFace(sql.FieldIn(FieldOracleText, vs...))
}

// OracleTextNotIn applies the NotIn predicate on the "oracle_text" field.
func OracleTextNotIn(vs ...string) predicate.CardFace {
	return predicate.CardFace(sql.FieldNotIn(FieldOracleText, vs...))
}

// OracleTextGT applies the GT predicate on the "oracle_text" field.
func OracleTextGT(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldGT(FieldOracleText, v))
}

// OracleTextGTE applies the GTE predicate on the "oracle_text" field.
func OracleTextGTE(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldGTE(FieldOracleText, v))
}

// OracleTextLT applies the LT predicate on the "oracle_text" field.
func OracleTextLT(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldLT(FieldOracleText, v))
}

// OracleTextLTE applies the LTE predicate on the "oracle_text" field.
func OracleTextLTE(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldLTE(FieldOracleText, v))
}

// OracleTextContains applies the Contains predicate on the "oracle_text" field.
func OracleTextContains(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldContains(FieldOracleText, v))
}

// OracleTextHasPrefix applies the HasPrefix predicate on the "oracle_text" field.
func OracleTextHasPrefix(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldHasPrefix(FieldOracleText, v))
}

// OracleTextHasSuffix applies the HasSuffix predicate on the "oracle_text" field.
func OracleTextHasSuffix(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldHasSuffix(FieldOracleText, v))
}

// OracleTextEqualFold applies the EqualFold predicate on the "oracle_text" field.
func OracleTextEqualFold(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldEqualFold(FieldOracleText, v))
}

// OracleTextContainsFold applies the ContainsFold predicate on the "oracle_text" field.
func OracleTextContainsFold(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldContainsFold(FieldOracleText, v))
}

// LanguageEQ applies the EQ predicate on the "language" field.
func LanguageEQ(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldEQ(FieldLanguage, v))
}

// LanguageNEQ applies the NEQ predicate on the "language" field.
func LanguageNEQ(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldNEQ(FieldLanguage, v))
}

// LanguageIn applies the In predicate on the "language" field.
func LanguageIn(vs ...string) predicate.CardFace {
	return predicate.CardFace(sql.FieldIn(FieldLanguage, vs...))
}

// LanguageNotIn applies the NotIn predicate on the "language" field.
func LanguageNotIn(vs ...string) predicate.CardFace {
	return predicate.CardFace(sql.FieldNotIn(FieldLanguage, vs...))
}

// LanguageGT applies the GT predicate on the "language" field.
func LanguageGT(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldGT(FieldLanguage, v))
}

// LanguageGTE applies the GTE predicate on the "language" field.
func LanguageGTE(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldGTE(FieldLanguage, v))
}

// LanguageLT applies the LT predicate on the "language" field.
func LanguageLT(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldLT(FieldLanguage, v))
}

// LanguageLTE applies the LTE predicate on the "language" field.
func LanguageLTE(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldLTE(FieldLanguage, v))
}

// LanguageContains applies the Contains predicate on the "language" field.
func LanguageContains(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldContains(FieldLanguage, v))
}

// LanguageHasPrefix applies the HasPrefix predicate on the "language" field.
func LanguageHasPrefix(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldHasPrefix(FieldLanguage, v))
}

// LanguageHasSuffix applies the HasSuffix predicate on the "language" field.
func LanguageHasSuffix(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldHasSuffix(FieldLanguage, v))
}

// LanguageEqualFold applies the EqualFold predicate on the "language" field.
func LanguageEqualFold(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldEqualFold(FieldLanguage, v))
}

// LanguageContainsFold applies the ContainsFold predicate on the "language" field.
func LanguageContainsFold(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldContainsFold(FieldLanguage, v))
}

// CmcEQ applies the EQ predicate on the "cmc" field.
func CmcEQ(v float32) predicate.CardFace {
	return predicate.CardFace(sql.FieldEQ(FieldCmc, v))
}

// CmcNEQ applies the NEQ predicate on the "cmc" field.
func CmcNEQ(v float32) predicate.CardFace {
	return predicate.CardFace(sql.FieldNEQ(FieldCmc, v))
}

// CmcIn applies the In predicate on the "cmc" field.
func CmcIn(vs ...float32) predicate.CardFace {
	return predicate.CardFace(sql.FieldIn(FieldCmc, vs...))
}

// CmcNotIn applies the NotIn predicate on the "cmc" field.
func CmcNotIn(vs ...float32) predicate.CardFace {
	return predicate.CardFace(sql.FieldNotIn(FieldCmc, vs...))
}

// CmcGT applies the GT predicate on the "cmc" field.
func CmcGT(v float32) predicate.CardFace {
	return predicate.CardFace(sql.FieldGT(FieldCmc, v))
}

// CmcGTE applies the GTE predicate on the "cmc" field.
func CmcGTE(v float32) predicate.CardFace {
	return predicate.CardFace(sql.FieldGTE(FieldCmc, v))
}

// CmcLT applies the LT predicate on the "cmc" field.
func CmcLT(v float32) predicate.CardFace {
	return predicate.CardFace(sql.FieldLT(FieldCmc, v))
}

// CmcLTE applies the LTE predicate on the "cmc" field.
func CmcLTE(v float32) predicate.CardFace {
	return predicate.CardFace(sql.FieldLTE(FieldCmc, v))
}

// PowerEQ applies the EQ predicate on the "power" field.
func PowerEQ(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldEQ(FieldPower, v))
}

// PowerNEQ applies the NEQ predicate on the "power" field.
func PowerNEQ(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldNEQ(FieldPower, v))
}

// PowerIn applies the In predicate on the "power" field.
func PowerIn(vs ...string) predicate.CardFace {
	return predicate.CardFace(sql.FieldIn(FieldPower, vs...))
}

// PowerNotIn applies the NotIn predicate on the "power" field.
func PowerNotIn(vs ...string) predicate.CardFace {
	return predicate.CardFace(sql.FieldNotIn(FieldPower, vs...))
}

// PowerGT applies the GT predicate on the "power" field.
func PowerGT(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldGT(FieldPower, v))
}

// PowerGTE applies the GTE predicate on the "power" field.
func PowerGTE(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldGTE(FieldPower, v))
}

// PowerLT applies the LT predicate on the "power" field.
func PowerLT(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldLT(FieldPower, v))
}

// PowerLTE applies the LTE predicate on the "power" field.
func PowerLTE(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldLTE(FieldPower, v))
}

// PowerContains applies the Contains predicate on the "power" field.
func PowerContains(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldContains(FieldPower, v))
}

// PowerHasPrefix applies the HasPrefix predicate on the "power" field.
func PowerHasPrefix(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldHasPrefix(FieldPower, v))
}

// PowerHasSuffix applies the HasSuffix predicate on the "power" field.
func PowerHasSuffix(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldHasSuffix(FieldPower, v))
}

// PowerEqualFold applies the EqualFold predicate on the "power" field.
func PowerEqualFold(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldEqualFold(FieldPower, v))
}

// PowerContainsFold applies the ContainsFold predicate on the "power" field.
func PowerContainsFold(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldContainsFold(FieldPower, v))
}

// ToughnessEQ applies the EQ predicate on the "toughness" field.
func ToughnessEQ(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldEQ(FieldToughness, v))
}

// ToughnessNEQ applies the NEQ predicate on the "toughness" field.
func ToughnessNEQ(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldNEQ(FieldToughness, v))
}

// ToughnessIn applies the In predicate on the "toughness" field.
func ToughnessIn(vs ...string) predicate.CardFace {
	return predicate.CardFace(sql.FieldIn(FieldToughness, vs...))
}

// ToughnessNotIn applies the NotIn predicate on the "toughness" field.
func ToughnessNotIn(vs ...string) predicate.CardFace {
	return predicate.CardFace(sql.FieldNotIn(FieldToughness, vs...))
}

// ToughnessGT applies the GT predicate on the "toughness" field.
func ToughnessGT(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldGT(FieldToughness, v))
}

// ToughnessGTE applies the GTE predicate on the "toughness" field.
func ToughnessGTE(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldGTE(FieldToughness, v))
}

// ToughnessLT applies the LT predicate on the "toughness" field.
func ToughnessLT(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldLT(FieldToughness, v))
}

// ToughnessLTE applies the LTE predicate on the "toughness" field.
func ToughnessLTE(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldLTE(FieldToughness, v))
}

// ToughnessContains applies the Contains predicate on the "toughness" field.
func ToughnessContains(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldContains(FieldToughness, v))
}

// ToughnessHasPrefix applies the HasPrefix predicate on the "toughness" field.
func ToughnessHasPrefix(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldHasPrefix(FieldToughness, v))
}

// ToughnessHasSuffix applies the HasSuffix predicate on the "toughness" field.
func ToughnessHasSuffix(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldHasSuffix(FieldToughness, v))
}

// ToughnessEqualFold applies the EqualFold predicate on the "toughness" field.
func ToughnessEqualFold(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldEqualFold(FieldToughness, v))
}

// ToughnessContainsFold applies the ContainsFold predicate on the "toughness" field.
func ToughnessContainsFold(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldContainsFold(FieldToughness, v))
}

// LoyaltyEQ applies the EQ predicate on the "loyalty" field.
func LoyaltyEQ(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldEQ(FieldLoyalty, v))
}

// LoyaltyNEQ applies the NEQ predicate on the "loyalty" field.
func LoyaltyNEQ(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldNEQ(FieldLoyalty, v))
}

// LoyaltyIn applies the In predicate on the "loyalty" field.
func LoyaltyIn(vs ...string) predicate.CardFace {
	return predicate.CardFace(sql.FieldIn(FieldLoyalty, vs...))
}

// LoyaltyNotIn applies the NotIn predicate on the "loyalty" field.
func LoyaltyNotIn(vs ...string) predicate.CardFace {
	return predicate.CardFace(sql.FieldNotIn(FieldLoyalty, vs...))
}

// LoyaltyGT applies the GT predicate on the "loyalty" field.
func LoyaltyGT(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldGT(FieldLoyalty, v))
}

// LoyaltyGTE applies the GTE predicate on the "loyalty" field.
func LoyaltyGTE(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldGTE(FieldLoyalty, v))
}

// LoyaltyLT applies the LT predicate on the "loyalty" field.
func LoyaltyLT(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldLT(FieldLoyalty, v))
}

// LoyaltyLTE applies the LTE predicate on the "loyalty" field.
func LoyaltyLTE(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldLTE(FieldLoyalty, v))
}

// LoyaltyContains applies the Contains predicate on the "loyalty" field.
func LoyaltyContains(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldContains(FieldLoyalty, v))
}

// LoyaltyHasPrefix applies the HasPrefix predicate on the "loyalty" field.
func LoyaltyHasPrefix(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldHasPrefix(FieldLoyalty, v))
}

// LoyaltyHasSuffix applies the HasSuffix predicate on the "loyalty" field.
func LoyaltyHasSuffix(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldHasSuffix(FieldLoyalty, v))
}

// LoyaltyEqualFold applies the EqualFold predicate on the "loyalty" field.
func LoyaltyEqualFold(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldEqualFold(FieldLoyalty, v))
}

// LoyaltyContainsFold applies the ContainsFold predicate on the "loyalty" field.
func LoyaltyContainsFold(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldContainsFold(FieldLoyalty, v))
}

// ManaCostEQ applies the EQ predicate on the "mana_cost" field.
func ManaCostEQ(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldEQ(FieldManaCost, v))
}

// ManaCostNEQ applies the NEQ predicate on the "mana_cost" field.
func ManaCostNEQ(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldNEQ(FieldManaCost, v))
}

// ManaCostIn applies the In predicate on the "mana_cost" field.
func ManaCostIn(vs ...string) predicate.CardFace {
	return predicate.CardFace(sql.FieldIn(FieldManaCost, vs...))
}

// ManaCostNotIn applies the NotIn predicate on the "mana_cost" field.
func ManaCostNotIn(vs ...string) predicate.CardFace {
	return predicate.CardFace(sql.FieldNotIn(FieldManaCost, vs...))
}

// ManaCostGT applies the GT predicate on the "mana_cost" field.
func ManaCostGT(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldGT(FieldManaCost, v))
}

// ManaCostGTE applies the GTE predicate on the "mana_cost" field.
func ManaCostGTE(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldGTE(FieldManaCost, v))
}

// ManaCostLT applies the LT predicate on the "mana_cost" field.
func ManaCostLT(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldLT(FieldManaCost, v))
}

// ManaCostLTE applies the LTE predicate on the "mana_cost" field.
func ManaCostLTE(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldLTE(FieldManaCost, v))
}

// ManaCostContains applies the Contains predicate on the "mana_cost" field.
func ManaCostContains(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldContains(FieldManaCost, v))
}

// ManaCostHasPrefix applies the HasPrefix predicate on the "mana_cost" field.
func ManaCostHasPrefix(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldHasPrefix(FieldManaCost, v))
}

// ManaCostHasSuffix applies the HasSuffix predicate on the "mana_cost" field.
func ManaCostHasSuffix(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldHasSuffix(FieldManaCost, v))
}

// ManaCostEqualFold applies the EqualFold predicate on the "mana_cost" field.
func ManaCostEqualFold(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldEqualFold(FieldManaCost, v))
}

// ManaCostContainsFold applies the ContainsFold predicate on the "mana_cost" field.
func ManaCostContainsFold(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldContainsFold(FieldManaCost, v))
}

// TypeLineEQ applies the EQ predicate on the "type_line" field.
func TypeLineEQ(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldEQ(FieldTypeLine, v))
}

// TypeLineNEQ applies the NEQ predicate on the "type_line" field.
func TypeLineNEQ(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldNEQ(FieldTypeLine, v))
}

// TypeLineIn applies the In predicate on the "type_line" field.
func TypeLineIn(vs ...string) predicate.CardFace {
	return predicate.CardFace(sql.FieldIn(FieldTypeLine, vs...))
}

// TypeLineNotIn applies the NotIn predicate on the "type_line" field.
func TypeLineNotIn(vs ...string) predicate.CardFace {
	return predicate.CardFace(sql.FieldNotIn(FieldTypeLine, vs...))
}

// TypeLineGT applies the GT predicate on the "type_line" field.
func TypeLineGT(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldGT(FieldTypeLine, v))
}

// TypeLineGTE applies the GTE predicate on the "type_line" field.
func TypeLineGTE(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldGTE(FieldTypeLine, v))
}

// TypeLineLT applies the LT predicate on the "type_line" field.
func TypeLineLT(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldLT(FieldTypeLine, v))
}

// TypeLineLTE applies the LTE predicate on the "type_line" field.
func TypeLineLTE(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldLTE(FieldTypeLine, v))
}

// TypeLineContains applies the Contains predicate on the "type_line" field.
func TypeLineContains(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldContains(FieldTypeLine, v))
}

// TypeLineHasPrefix applies the HasPrefix predicate on the "type_line" field.
func TypeLineHasPrefix(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldHasPrefix(FieldTypeLine, v))
}

// TypeLineHasSuffix applies the HasSuffix predicate on the "type_line" field.
func TypeLineHasSuffix(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldHasSuffix(FieldTypeLine, v))
}

// TypeLineEqualFold applies the EqualFold predicate on the "type_line" field.
func TypeLineEqualFold(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldEqualFold(FieldTypeLine, v))
}

// TypeLineContainsFold applies the ContainsFold predicate on the "type_line" field.
func TypeLineContainsFold(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldContainsFold(FieldTypeLine, v))
}

// ColorsEQ applies the EQ predicate on the "colors" field.
func ColorsEQ(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldEQ(FieldColors, v))
}

// ColorsNEQ applies the NEQ predicate on the "colors" field.
func ColorsNEQ(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldNEQ(FieldColors, v))
}

// ColorsIn applies the In predicate on the "colors" field.
func ColorsIn(vs ...string) predicate.CardFace {
	return predicate.CardFace(sql.FieldIn(FieldColors, vs...))
}

// ColorsNotIn applies the NotIn predicate on the "colors" field.
func ColorsNotIn(vs ...string) predicate.CardFace {
	return predicate.CardFace(sql.FieldNotIn(FieldColors, vs...))
}

// ColorsGT applies the GT predicate on the "colors" field.
func ColorsGT(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldGT(FieldColors, v))
}

// ColorsGTE applies the GTE predicate on the "colors" field.
func ColorsGTE(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldGTE(FieldColors, v))
}

// ColorsLT applies the LT predicate on the "colors" field.
func ColorsLT(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldLT(FieldColors, v))
}

// ColorsLTE applies the LTE predicate on the "colors" field.
func ColorsLTE(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldLTE(FieldColors, v))
}

// ColorsContains applies the Contains predicate on the "colors" field.
func ColorsContains(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldContains(FieldColors, v))
}

// ColorsHasPrefix applies the HasPrefix predicate on the "colors" field.
func ColorsHasPrefix(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldHasPrefix(FieldColors, v))
}

// ColorsHasSuffix applies the HasSuffix predicate on the "colors" field.
func ColorsHasSuffix(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldHasSuffix(FieldColors, v))
}

// ColorsEqualFold applies the EqualFold predicate on the "colors" field.
func ColorsEqualFold(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldEqualFold(FieldColors, v))
}

// ColorsContainsFold applies the ContainsFold predicate on the "colors" field.
func ColorsContainsFold(v string) predicate.CardFace {
	return predicate.CardFace(sql.FieldContainsFold(FieldColors, v))
}

// HasCard applies the HasEdge predicate on the "card" edge.
func HasCard() predicate.CardFace {
	return predicate.CardFace(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CardTable, CardColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCardWith applies the HasEdge predicate on the "card" edge with a given conditions (other predicates).
func HasCardWith(preds ...predicate.Card) predicate.CardFace {
	return predicate.CardFace(func(s *sql.Selector) {
		step := newCardStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPrintings applies the HasEdge predicate on the "printings" edge.
func HasPrintings() predicate.CardFace {
	return predicate.CardFace(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, PrintingsTable, PrintingsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPrintingsWith applies the HasEdge predicate on the "printings" edge with a given conditions (other predicates).
func HasPrintingsWith(preds ...predicate.Printing) predicate.CardFace {
	return predicate.CardFace(func(s *sql.Selector) {
		step := newPrintingsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CardFace) predicate.CardFace {
	return predicate.CardFace(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CardFace) predicate.CardFace {
	return predicate.CardFace(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CardFace) predicate.CardFace {
	return predicate.CardFace(sql.NotPredicates(p))
}
