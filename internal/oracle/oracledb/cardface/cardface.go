// Code generated by ent, DO NOT EDIT.

package cardface

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the cardface type in the database.
	Label = "card_face"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldFlavorText holds the string denoting the flavor_text field in the database.
	FieldFlavorText = "flavor_text"
	// FieldOracleText holds the string denoting the oracle_text field in the database.
	FieldOracleText = "oracle_text"
	// FieldLanguage holds the string denoting the language field in the database.
	FieldLanguage = "language"
	// FieldCmc holds the string denoting the cmc field in the database.
	FieldCmc = "cmc"
	// FieldPower holds the string denoting the power field in the database.
	FieldPower = "power"
	// FieldToughness holds the string denoting the toughness field in the database.
	FieldToughness = "toughness"
	// FieldLoyalty holds the string denoting the loyalty field in the database.
	FieldLoyalty = "loyalty"
	// FieldManaCost holds the string denoting the mana_cost field in the database.
	FieldManaCost = "mana_cost"
	// FieldTypeLine holds the string denoting the type_line field in the database.
	FieldTypeLine = "type_line"
	// FieldColors holds the string denoting the colors field in the database.
	FieldColors = "colors"
	// EdgeCard holds the string denoting the card edge name in mutations.
	EdgeCard = "card"
	// EdgePrintings holds the string denoting the printings edge name in mutations.
	EdgePrintings = "printings"
	// Table holds the table name of the cardface in the database.
	Table = "card_faces"
	// CardTable is the table that holds the card relation/edge.
	CardTable = "card_faces"
	// CardInverseTable is the table name for the Card entity.
	// It exists in this package in order to avoid circular dependency with the "card" package.
	CardInverseTable = "cards"
	// CardColumn is the table column denoting the card relation/edge.
	CardColumn = "card_face_card"
	// PrintingsTable is the table that holds the printings relation/edge.
	PrintingsTable = "printings"
	// PrintingsInverseTable is the table name for the Printing entity.
	// It exists in this package in order to avoid circular dependency with the "printing" package.
	PrintingsInverseTable = "printings"
	// PrintingsColumn is the table column denoting the printings relation/edge.
	PrintingsColumn = "printing_card_face"
)

// Columns holds all SQL columns for cardface fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldFlavorText,
	FieldOracleText,
	FieldLanguage,
	FieldCmc,
	FieldPower,
	FieldToughness,
	FieldLoyalty,
	FieldManaCost,
	FieldTypeLine,
	FieldColors,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "card_faces"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"card_face_card",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// FlavorTextValidator is a validator for the "flavor_text" field. It is called by the builders before save.
	FlavorTextValidator func(string) error
	// OracleTextValidator is a validator for the "oracle_text" field. It is called by the builders before save.
	OracleTextValidator func(string) error
)

// OrderOption defines the ordering options for the CardFace queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByFlavorText orders the results by the flavor_text field.
func ByFlavorText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFlavorText, opts...).ToFunc()
}

// ByOracleText orders the results by the oracle_text field.
func ByOracleText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOracleText, opts...).ToFunc()
}

// ByLanguage orders the results by the language field.
func ByLanguage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLanguage, opts...).ToFunc()
}

// ByCmc orders the results by the cmc field.
func ByCmc(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCmc, opts...).ToFunc()
}

// ByPower orders the results by the power field.
func ByPower(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPower, opts...).ToFunc()
}

// ByToughness orders the results by the toughness field.
func ByToughness(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToughness, opts...).ToFunc()
}

// ByLoyalty orders the results by the loyalty field.
func ByLoyalty(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLoyalty, opts...).ToFunc()
}

// ByManaCost orders the results by the mana_cost field.
func ByManaCost(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldManaCost, opts...).ToFunc()
}

// ByTypeLine orders the results by the type_line field.
func ByTypeLine(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTypeLine, opts...).ToFunc()
}

// ByColors orders the results by the colors field.
func ByColors(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldColors, opts...).ToFunc()
}

// ByCardField orders the results by card field.
func ByCardField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCardStep(), sql.OrderByField(field, opts...))
	}
}

// ByPrintingsCount orders the results by printings count.
func ByPrintingsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPrintingsStep(), opts...)
	}
}

// ByPrintings orders the results by printings terms.
func ByPrintings(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPrintingsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCardStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CardInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CardTable, CardColumn),
	)
}
func newPrintingsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PrintingsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, PrintingsTable, PrintingsColumn),
	)
}
