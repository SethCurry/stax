// Code generated by ent, DO NOT EDIT.

package printing

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the printing type in the database.
	Label = "printing"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRarity holds the string denoting the rarity field in the database.
	FieldRarity = "rarity"
	// EdgeArtist holds the string denoting the artist edge name in mutations.
	EdgeArtist = "artist"
	// EdgeSet holds the string denoting the set edge name in mutations.
	EdgeSet = "set"
	// EdgeCardFace holds the string denoting the card_face edge name in mutations.
	EdgeCardFace = "card_face"
	// EdgeImages holds the string denoting the images edge name in mutations.
	EdgeImages = "images"
	// Table holds the table name of the printing in the database.
	Table = "printings"
	// ArtistTable is the table that holds the artist relation/edge.
	ArtistTable = "printings"
	// ArtistInverseTable is the table name for the Artist entity.
	// It exists in this package in order to avoid circular dependency with the "artist" package.
	ArtistInverseTable = "artists"
	// ArtistColumn is the table column denoting the artist relation/edge.
	ArtistColumn = "printing_artist"
	// SetTable is the table that holds the set relation/edge.
	SetTable = "printings"
	// SetInverseTable is the table name for the Set entity.
	// It exists in this package in order to avoid circular dependency with the "set" package.
	SetInverseTable = "sets"
	// SetColumn is the table column denoting the set relation/edge.
	SetColumn = "printing_set"
	// CardFaceTable is the table that holds the card_face relation/edge.
	CardFaceTable = "printings"
	// CardFaceInverseTable is the table name for the CardFace entity.
	// It exists in this package in order to avoid circular dependency with the "cardface" package.
	CardFaceInverseTable = "card_faces"
	// CardFaceColumn is the table column denoting the card_face relation/edge.
	CardFaceColumn = "printing_card_face"
	// ImagesTable is the table that holds the images relation/edge.
	ImagesTable = "printing_images"
	// ImagesInverseTable is the table name for the PrintingImage entity.
	// It exists in this package in order to avoid circular dependency with the "printingimage" package.
	ImagesInverseTable = "printing_images"
	// ImagesColumn is the table column denoting the images relation/edge.
	ImagesColumn = "printing_image_printing"
)

// Columns holds all SQL columns for printing fields.
var Columns = []string{
	FieldID,
	FieldRarity,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "printings"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"printing_artist",
	"printing_set",
	"printing_card_face",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Rarity defines the type for the "rarity" enum field.
type Rarity string

// Rarity values.
const (
	RarityCommon   Rarity = "common"
	RarityUncommon Rarity = "uncommon"
	RarityRare     Rarity = "rare"
	RarityMythic   Rarity = "mythic"
)

func (r Rarity) String() string {
	return string(r)
}

// RarityValidator is a validator for the "rarity" field enum values. It is called by the builders before save.
func RarityValidator(r Rarity) error {
	switch r {
	case RarityCommon, RarityUncommon, RarityRare, RarityMythic:
		return nil
	default:
		return fmt.Errorf("printing: invalid enum value for rarity field: %q", r)
	}
}

// OrderOption defines the ordering options for the Printing queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRarity orders the results by the rarity field.
func ByRarity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRarity, opts...).ToFunc()
}

// ByArtistField orders the results by artist field.
func ByArtistField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newArtistStep(), sql.OrderByField(field, opts...))
	}
}

// BySetField orders the results by set field.
func BySetField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSetStep(), sql.OrderByField(field, opts...))
	}
}

// ByCardFaceField orders the results by card_face field.
func ByCardFaceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCardFaceStep(), sql.OrderByField(field, opts...))
	}
}

// ByImagesCount orders the results by images count.
func ByImagesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newImagesStep(), opts...)
	}
}

// ByImages orders the results by images terms.
func ByImages(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newImagesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newArtistStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ArtistInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ArtistTable, ArtistColumn),
	)
}
func newSetStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SetInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SetTable, SetColumn),
	)
}
func newCardFaceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CardFaceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CardFaceTable, CardFaceColumn),
	)
}
func newImagesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ImagesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ImagesTable, ImagesColumn),
	)
}
