// Code generated by ent, DO NOT EDIT.

package printing

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/SethCurry/stax/internal/oracle/oracledb/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Printing {
	return predicate.Printing(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Printing {
	return predicate.Printing(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Printing {
	return predicate.Printing(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Printing {
	return predicate.Printing(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Printing {
	return predicate.Printing(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Printing {
	return predicate.Printing(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Printing {
	return predicate.Printing(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Printing {
	return predicate.Printing(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Printing {
	return predicate.Printing(sql.FieldLTE(FieldID, id))
}

// RarityEQ applies the EQ predicate on the "rarity" field.
func RarityEQ(v Rarity) predicate.Printing {
	return predicate.Printing(sql.FieldEQ(FieldRarity, v))
}

// RarityNEQ applies the NEQ predicate on the "rarity" field.
func RarityNEQ(v Rarity) predicate.Printing {
	return predicate.Printing(sql.FieldNEQ(FieldRarity, v))
}

// RarityIn applies the In predicate on the "rarity" field.
func RarityIn(vs ...Rarity) predicate.Printing {
	return predicate.Printing(sql.FieldIn(FieldRarity, vs...))
}

// RarityNotIn applies the NotIn predicate on the "rarity" field.
func RarityNotIn(vs ...Rarity) predicate.Printing {
	return predicate.Printing(sql.FieldNotIn(FieldRarity, vs...))
}

// HasArtist applies the HasEdge predicate on the "artist" edge.
func HasArtist() predicate.Printing {
	return predicate.Printing(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ArtistTable, ArtistColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasArtistWith applies the HasEdge predicate on the "artist" edge with a given conditions (other predicates).
func HasArtistWith(preds ...predicate.Artist) predicate.Printing {
	return predicate.Printing(func(s *sql.Selector) {
		step := newArtistStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSet applies the HasEdge predicate on the "set" edge.
func HasSet() predicate.Printing {
	return predicate.Printing(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SetTable, SetColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSetWith applies the HasEdge predicate on the "set" edge with a given conditions (other predicates).
func HasSetWith(preds ...predicate.Set) predicate.Printing {
	return predicate.Printing(func(s *sql.Selector) {
		step := newSetStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCardFace applies the HasEdge predicate on the "card_face" edge.
func HasCardFace() predicate.Printing {
	return predicate.Printing(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CardFaceTable, CardFaceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCardFaceWith applies the HasEdge predicate on the "card_face" edge with a given conditions (other predicates).
func HasCardFaceWith(preds ...predicate.CardFace) predicate.Printing {
	return predicate.Printing(func(s *sql.Selector) {
		step := newCardFaceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasImages applies the HasEdge predicate on the "images" edge.
func HasImages() predicate.Printing {
	return predicate.Printing(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ImagesTable, ImagesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasImagesWith applies the HasEdge predicate on the "images" edge with a given conditions (other predicates).
func HasImagesWith(preds ...predicate.PrintingImage) predicate.Printing {
	return predicate.Printing(func(s *sql.Selector) {
		step := newImagesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Printing) predicate.Printing {
	return predicate.Printing(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Printing) predicate.Printing {
	return predicate.Printing(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Printing) predicate.Printing {
	return predicate.Printing(sql.NotPredicates(p))
}
