// Code generated by ent, DO NOT EDIT.

package card

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the card type in the database.
	Label = "card"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldOracleID holds the string denoting the oracle_id field in the database.
	FieldOracleID = "oracle_id"
	// FieldColorIdentity holds the string denoting the color_identity field in the database.
	FieldColorIdentity = "color_identity"
	// EdgeFaces holds the string denoting the faces edge name in mutations.
	EdgeFaces = "faces"
	// EdgeRulings holds the string denoting the rulings edge name in mutations.
	EdgeRulings = "rulings"
	// Table holds the table name of the card in the database.
	Table = "cards"
	// FacesTable is the table that holds the faces relation/edge.
	FacesTable = "card_faces"
	// FacesInverseTable is the table name for the CardFace entity.
	// It exists in this package in order to avoid circular dependency with the "cardface" package.
	FacesInverseTable = "card_faces"
	// FacesColumn is the table column denoting the faces relation/edge.
	FacesColumn = "card_face_card"
	// RulingsTable is the table that holds the rulings relation/edge.
	RulingsTable = "rulings"
	// RulingsInverseTable is the table name for the Ruling entity.
	// It exists in this package in order to avoid circular dependency with the "ruling" package.
	RulingsInverseTable = "rulings"
	// RulingsColumn is the table column denoting the rulings relation/edge.
	RulingsColumn = "ruling_card"
)

// Columns holds all SQL columns for card fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldOracleID,
	FieldColorIdentity,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// OracleIDValidator is a validator for the "oracle_id" field. It is called by the builders before save.
	OracleIDValidator func(string) error
)

// OrderOption defines the ordering options for the Card queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByOracleID orders the results by the oracle_id field.
func ByOracleID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOracleID, opts...).ToFunc()
}

// ByColorIdentity orders the results by the color_identity field.
func ByColorIdentity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldColorIdentity, opts...).ToFunc()
}

// ByFacesCount orders the results by faces count.
func ByFacesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFacesStep(), opts...)
	}
}

// ByFaces orders the results by faces terms.
func ByFaces(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFacesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRulingsCount orders the results by rulings count.
func ByRulingsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRulingsStep(), opts...)
	}
}

// ByRulings orders the results by rulings terms.
func ByRulings(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRulingsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newFacesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FacesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, FacesTable, FacesColumn),
	)
}
func newRulingsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RulingsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, RulingsTable, RulingsColumn),
	)
}
