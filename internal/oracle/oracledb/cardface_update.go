// Code generated by ent, DO NOT EDIT.

package oracledb

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SethCurry/stax/internal/oracle/oracledb/card"
	"github.com/SethCurry/stax/internal/oracle/oracledb/cardface"
	"github.com/SethCurry/stax/internal/oracle/oracledb/predicate"
	"github.com/SethCurry/stax/internal/oracle/oracledb/printing"
)

// CardFaceUpdate is the builder for updating CardFace entities.
type CardFaceUpdate struct {
	config
	hooks    []Hook
	mutation *CardFaceMutation
}

// Where appends a list predicates to the CardFaceUpdate builder.
func (cfu *CardFaceUpdate) Where(ps ...predicate.CardFace) *CardFaceUpdate {
	cfu.mutation.Where(ps...)
	return cfu
}

// SetName sets the "name" field.
func (cfu *CardFaceUpdate) SetName(s string) *CardFaceUpdate {
	cfu.mutation.SetName(s)
	return cfu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cfu *CardFaceUpdate) SetNillableName(s *string) *CardFaceUpdate {
	if s != nil {
		cfu.SetName(*s)
	}
	return cfu
}

// SetFlavorText sets the "flavor_text" field.
func (cfu *CardFaceUpdate) SetFlavorText(s string) *CardFaceUpdate {
	cfu.mutation.SetFlavorText(s)
	return cfu
}

// SetNillableFlavorText sets the "flavor_text" field if the given value is not nil.
func (cfu *CardFaceUpdate) SetNillableFlavorText(s *string) *CardFaceUpdate {
	if s != nil {
		cfu.SetFlavorText(*s)
	}
	return cfu
}

// SetOracleText sets the "oracle_text" field.
func (cfu *CardFaceUpdate) SetOracleText(s string) *CardFaceUpdate {
	cfu.mutation.SetOracleText(s)
	return cfu
}

// SetNillableOracleText sets the "oracle_text" field if the given value is not nil.
func (cfu *CardFaceUpdate) SetNillableOracleText(s *string) *CardFaceUpdate {
	if s != nil {
		cfu.SetOracleText(*s)
	}
	return cfu
}

// SetLanguage sets the "language" field.
func (cfu *CardFaceUpdate) SetLanguage(s string) *CardFaceUpdate {
	cfu.mutation.SetLanguage(s)
	return cfu
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (cfu *CardFaceUpdate) SetNillableLanguage(s *string) *CardFaceUpdate {
	if s != nil {
		cfu.SetLanguage(*s)
	}
	return cfu
}

// SetCmc sets the "cmc" field.
func (cfu *CardFaceUpdate) SetCmc(f float32) *CardFaceUpdate {
	cfu.mutation.ResetCmc()
	cfu.mutation.SetCmc(f)
	return cfu
}

// SetNillableCmc sets the "cmc" field if the given value is not nil.
func (cfu *CardFaceUpdate) SetNillableCmc(f *float32) *CardFaceUpdate {
	if f != nil {
		cfu.SetCmc(*f)
	}
	return cfu
}

// AddCmc adds f to the "cmc" field.
func (cfu *CardFaceUpdate) AddCmc(f float32) *CardFaceUpdate {
	cfu.mutation.AddCmc(f)
	return cfu
}

// SetPower sets the "power" field.
func (cfu *CardFaceUpdate) SetPower(s string) *CardFaceUpdate {
	cfu.mutation.SetPower(s)
	return cfu
}

// SetNillablePower sets the "power" field if the given value is not nil.
func (cfu *CardFaceUpdate) SetNillablePower(s *string) *CardFaceUpdate {
	if s != nil {
		cfu.SetPower(*s)
	}
	return cfu
}

// SetToughness sets the "toughness" field.
func (cfu *CardFaceUpdate) SetToughness(s string) *CardFaceUpdate {
	cfu.mutation.SetToughness(s)
	return cfu
}

// SetNillableToughness sets the "toughness" field if the given value is not nil.
func (cfu *CardFaceUpdate) SetNillableToughness(s *string) *CardFaceUpdate {
	if s != nil {
		cfu.SetToughness(*s)
	}
	return cfu
}

// SetLoyalty sets the "loyalty" field.
func (cfu *CardFaceUpdate) SetLoyalty(s string) *CardFaceUpdate {
	cfu.mutation.SetLoyalty(s)
	return cfu
}

// SetNillableLoyalty sets the "loyalty" field if the given value is not nil.
func (cfu *CardFaceUpdate) SetNillableLoyalty(s *string) *CardFaceUpdate {
	if s != nil {
		cfu.SetLoyalty(*s)
	}
	return cfu
}

// SetManaCost sets the "mana_cost" field.
func (cfu *CardFaceUpdate) SetManaCost(s string) *CardFaceUpdate {
	cfu.mutation.SetManaCost(s)
	return cfu
}

// SetNillableManaCost sets the "mana_cost" field if the given value is not nil.
func (cfu *CardFaceUpdate) SetNillableManaCost(s *string) *CardFaceUpdate {
	if s != nil {
		cfu.SetManaCost(*s)
	}
	return cfu
}

// SetTypeLine sets the "type_line" field.
func (cfu *CardFaceUpdate) SetTypeLine(s string) *CardFaceUpdate {
	cfu.mutation.SetTypeLine(s)
	return cfu
}

// SetNillableTypeLine sets the "type_line" field if the given value is not nil.
func (cfu *CardFaceUpdate) SetNillableTypeLine(s *string) *CardFaceUpdate {
	if s != nil {
		cfu.SetTypeLine(*s)
	}
	return cfu
}

// SetColors sets the "colors" field.
func (cfu *CardFaceUpdate) SetColors(s string) *CardFaceUpdate {
	cfu.mutation.SetColors(s)
	return cfu
}

// SetNillableColors sets the "colors" field if the given value is not nil.
func (cfu *CardFaceUpdate) SetNillableColors(s *string) *CardFaceUpdate {
	if s != nil {
		cfu.SetColors(*s)
	}
	return cfu
}

// SetCardID sets the "card" edge to the Card entity by ID.
func (cfu *CardFaceUpdate) SetCardID(id int) *CardFaceUpdate {
	cfu.mutation.SetCardID(id)
	return cfu
}

// SetNillableCardID sets the "card" edge to the Card entity by ID if the given value is not nil.
func (cfu *CardFaceUpdate) SetNillableCardID(id *int) *CardFaceUpdate {
	if id != nil {
		cfu = cfu.SetCardID(*id)
	}
	return cfu
}

// SetCard sets the "card" edge to the Card entity.
func (cfu *CardFaceUpdate) SetCard(c *Card) *CardFaceUpdate {
	return cfu.SetCardID(c.ID)
}

// AddPrintingIDs adds the "printings" edge to the Printing entity by IDs.
func (cfu *CardFaceUpdate) AddPrintingIDs(ids ...int) *CardFaceUpdate {
	cfu.mutation.AddPrintingIDs(ids...)
	return cfu
}

// AddPrintings adds the "printings" edges to the Printing entity.
func (cfu *CardFaceUpdate) AddPrintings(p ...*Printing) *CardFaceUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cfu.AddPrintingIDs(ids...)
}

// Mutation returns the CardFaceMutation object of the builder.
func (cfu *CardFaceUpdate) Mutation() *CardFaceMutation {
	return cfu.mutation
}

// ClearCard clears the "card" edge to the Card entity.
func (cfu *CardFaceUpdate) ClearCard() *CardFaceUpdate {
	cfu.mutation.ClearCard()
	return cfu
}

// ClearPrintings clears all "printings" edges to the Printing entity.
func (cfu *CardFaceUpdate) ClearPrintings() *CardFaceUpdate {
	cfu.mutation.ClearPrintings()
	return cfu
}

// RemovePrintingIDs removes the "printings" edge to Printing entities by IDs.
func (cfu *CardFaceUpdate) RemovePrintingIDs(ids ...int) *CardFaceUpdate {
	cfu.mutation.RemovePrintingIDs(ids...)
	return cfu
}

// RemovePrintings removes "printings" edges to Printing entities.
func (cfu *CardFaceUpdate) RemovePrintings(p ...*Printing) *CardFaceUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cfu.RemovePrintingIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cfu *CardFaceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cfu.sqlSave, cfu.mutation, cfu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cfu *CardFaceUpdate) SaveX(ctx context.Context) int {
	affected, err := cfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cfu *CardFaceUpdate) Exec(ctx context.Context) error {
	_, err := cfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cfu *CardFaceUpdate) ExecX(ctx context.Context) {
	if err := cfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cfu *CardFaceUpdate) check() error {
	if v, ok := cfu.mutation.Name(); ok {
		if err := cardface.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`oracledb: validator failed for field "CardFace.name": %w`, err)}
		}
	}
	if v, ok := cfu.mutation.FlavorText(); ok {
		if err := cardface.FlavorTextValidator(v); err != nil {
			return &ValidationError{Name: "flavor_text", err: fmt.Errorf(`oracledb: validator failed for field "CardFace.flavor_text": %w`, err)}
		}
	}
	if v, ok := cfu.mutation.OracleText(); ok {
		if err := cardface.OracleTextValidator(v); err != nil {
			return &ValidationError{Name: "oracle_text", err: fmt.Errorf(`oracledb: validator failed for field "CardFace.oracle_text": %w`, err)}
		}
	}
	return nil
}

func (cfu *CardFaceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cfu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(cardface.Table, cardface.Columns, sqlgraph.NewFieldSpec(cardface.FieldID, field.TypeInt))
	if ps := cfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cfu.mutation.Name(); ok {
		_spec.SetField(cardface.FieldName, field.TypeString, value)
	}
	if value, ok := cfu.mutation.FlavorText(); ok {
		_spec.SetField(cardface.FieldFlavorText, field.TypeString, value)
	}
	if value, ok := cfu.mutation.OracleText(); ok {
		_spec.SetField(cardface.FieldOracleText, field.TypeString, value)
	}
	if value, ok := cfu.mutation.Language(); ok {
		_spec.SetField(cardface.FieldLanguage, field.TypeString, value)
	}
	if value, ok := cfu.mutation.Cmc(); ok {
		_spec.SetField(cardface.FieldCmc, field.TypeFloat32, value)
	}
	if value, ok := cfu.mutation.AddedCmc(); ok {
		_spec.AddField(cardface.FieldCmc, field.TypeFloat32, value)
	}
	if value, ok := cfu.mutation.Power(); ok {
		_spec.SetField(cardface.FieldPower, field.TypeString, value)
	}
	if value, ok := cfu.mutation.Toughness(); ok {
		_spec.SetField(cardface.FieldToughness, field.TypeString, value)
	}
	if value, ok := cfu.mutation.Loyalty(); ok {
		_spec.SetField(cardface.FieldLoyalty, field.TypeString, value)
	}
	if value, ok := cfu.mutation.ManaCost(); ok {
		_spec.SetField(cardface.FieldManaCost, field.TypeString, value)
	}
	if value, ok := cfu.mutation.TypeLine(); ok {
		_spec.SetField(cardface.FieldTypeLine, field.TypeString, value)
	}
	if value, ok := cfu.mutation.Colors(); ok {
		_spec.SetField(cardface.FieldColors, field.TypeString, value)
	}
	if cfu.mutation.CardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cardface.CardTable,
			Columns: []string{cardface.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(card.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cfu.mutation.CardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cardface.CardTable,
			Columns: []string{cardface.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(card.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cfu.mutation.PrintingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   cardface.PrintingsTable,
			Columns: []string{cardface.PrintingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printing.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cfu.mutation.RemovedPrintingsIDs(); len(nodes) > 0 && !cfu.mutation.PrintingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   cardface.PrintingsTable,
			Columns: []string{cardface.PrintingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printing.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cfu.mutation.PrintingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   cardface.PrintingsTable,
			Columns: []string{cardface.PrintingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printing.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cardface.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cfu.mutation.done = true
	return n, nil
}

// CardFaceUpdateOne is the builder for updating a single CardFace entity.
type CardFaceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CardFaceMutation
}

// SetName sets the "name" field.
func (cfuo *CardFaceUpdateOne) SetName(s string) *CardFaceUpdateOne {
	cfuo.mutation.SetName(s)
	return cfuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cfuo *CardFaceUpdateOne) SetNillableName(s *string) *CardFaceUpdateOne {
	if s != nil {
		cfuo.SetName(*s)
	}
	return cfuo
}

// SetFlavorText sets the "flavor_text" field.
func (cfuo *CardFaceUpdateOne) SetFlavorText(s string) *CardFaceUpdateOne {
	cfuo.mutation.SetFlavorText(s)
	return cfuo
}

// SetNillableFlavorText sets the "flavor_text" field if the given value is not nil.
func (cfuo *CardFaceUpdateOne) SetNillableFlavorText(s *string) *CardFaceUpdateOne {
	if s != nil {
		cfuo.SetFlavorText(*s)
	}
	return cfuo
}

// SetOracleText sets the "oracle_text" field.
func (cfuo *CardFaceUpdateOne) SetOracleText(s string) *CardFaceUpdateOne {
	cfuo.mutation.SetOracleText(s)
	return cfuo
}

// SetNillableOracleText sets the "oracle_text" field if the given value is not nil.
func (cfuo *CardFaceUpdateOne) SetNillableOracleText(s *string) *CardFaceUpdateOne {
	if s != nil {
		cfuo.SetOracleText(*s)
	}
	return cfuo
}

// SetLanguage sets the "language" field.
func (cfuo *CardFaceUpdateOne) SetLanguage(s string) *CardFaceUpdateOne {
	cfuo.mutation.SetLanguage(s)
	return cfuo
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (cfuo *CardFaceUpdateOne) SetNillableLanguage(s *string) *CardFaceUpdateOne {
	if s != nil {
		cfuo.SetLanguage(*s)
	}
	return cfuo
}

// SetCmc sets the "cmc" field.
func (cfuo *CardFaceUpdateOne) SetCmc(f float32) *CardFaceUpdateOne {
	cfuo.mutation.ResetCmc()
	cfuo.mutation.SetCmc(f)
	return cfuo
}

// SetNillableCmc sets the "cmc" field if the given value is not nil.
func (cfuo *CardFaceUpdateOne) SetNillableCmc(f *float32) *CardFaceUpdateOne {
	if f != nil {
		cfuo.SetCmc(*f)
	}
	return cfuo
}

// AddCmc adds f to the "cmc" field.
func (cfuo *CardFaceUpdateOne) AddCmc(f float32) *CardFaceUpdateOne {
	cfuo.mutation.AddCmc(f)
	return cfuo
}

// SetPower sets the "power" field.
func (cfuo *CardFaceUpdateOne) SetPower(s string) *CardFaceUpdateOne {
	cfuo.mutation.SetPower(s)
	return cfuo
}

// SetNillablePower sets the "power" field if the given value is not nil.
func (cfuo *CardFaceUpdateOne) SetNillablePower(s *string) *CardFaceUpdateOne {
	if s != nil {
		cfuo.SetPower(*s)
	}
	return cfuo
}

// SetToughness sets the "toughness" field.
func (cfuo *CardFaceUpdateOne) SetToughness(s string) *CardFaceUpdateOne {
	cfuo.mutation.SetToughness(s)
	return cfuo
}

// SetNillableToughness sets the "toughness" field if the given value is not nil.
func (cfuo *CardFaceUpdateOne) SetNillableToughness(s *string) *CardFaceUpdateOne {
	if s != nil {
		cfuo.SetToughness(*s)
	}
	return cfuo
}

// SetLoyalty sets the "loyalty" field.
func (cfuo *CardFaceUpdateOne) SetLoyalty(s string) *CardFaceUpdateOne {
	cfuo.mutation.SetLoyalty(s)
	return cfuo
}

// SetNillableLoyalty sets the "loyalty" field if the given value is not nil.
func (cfuo *CardFaceUpdateOne) SetNillableLoyalty(s *string) *CardFaceUpdateOne {
	if s != nil {
		cfuo.SetLoyalty(*s)
	}
	return cfuo
}

// SetManaCost sets the "mana_cost" field.
func (cfuo *CardFaceUpdateOne) SetManaCost(s string) *CardFaceUpdateOne {
	cfuo.mutation.SetManaCost(s)
	return cfuo
}

// SetNillableManaCost sets the "mana_cost" field if the given value is not nil.
func (cfuo *CardFaceUpdateOne) SetNillableManaCost(s *string) *CardFaceUpdateOne {
	if s != nil {
		cfuo.SetManaCost(*s)
	}
	return cfuo
}

// SetTypeLine sets the "type_line" field.
func (cfuo *CardFaceUpdateOne) SetTypeLine(s string) *CardFaceUpdateOne {
	cfuo.mutation.SetTypeLine(s)
	return cfuo
}

// SetNillableTypeLine sets the "type_line" field if the given value is not nil.
func (cfuo *CardFaceUpdateOne) SetNillableTypeLine(s *string) *CardFaceUpdateOne {
	if s != nil {
		cfuo.SetTypeLine(*s)
	}
	return cfuo
}

// SetColors sets the "colors" field.
func (cfuo *CardFaceUpdateOne) SetColors(s string) *CardFaceUpdateOne {
	cfuo.mutation.SetColors(s)
	return cfuo
}

// SetNillableColors sets the "colors" field if the given value is not nil.
func (cfuo *CardFaceUpdateOne) SetNillableColors(s *string) *CardFaceUpdateOne {
	if s != nil {
		cfuo.SetColors(*s)
	}
	return cfuo
}

// SetCardID sets the "card" edge to the Card entity by ID.
func (cfuo *CardFaceUpdateOne) SetCardID(id int) *CardFaceUpdateOne {
	cfuo.mutation.SetCardID(id)
	return cfuo
}

// SetNillableCardID sets the "card" edge to the Card entity by ID if the given value is not nil.
func (cfuo *CardFaceUpdateOne) SetNillableCardID(id *int) *CardFaceUpdateOne {
	if id != nil {
		cfuo = cfuo.SetCardID(*id)
	}
	return cfuo
}

// SetCard sets the "card" edge to the Card entity.
func (cfuo *CardFaceUpdateOne) SetCard(c *Card) *CardFaceUpdateOne {
	return cfuo.SetCardID(c.ID)
}

// AddPrintingIDs adds the "printings" edge to the Printing entity by IDs.
func (cfuo *CardFaceUpdateOne) AddPrintingIDs(ids ...int) *CardFaceUpdateOne {
	cfuo.mutation.AddPrintingIDs(ids...)
	return cfuo
}

// AddPrintings adds the "printings" edges to the Printing entity.
func (cfuo *CardFaceUpdateOne) AddPrintings(p ...*Printing) *CardFaceUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cfuo.AddPrintingIDs(ids...)
}

// Mutation returns the CardFaceMutation object of the builder.
func (cfuo *CardFaceUpdateOne) Mutation() *CardFaceMutation {
	return cfuo.mutation
}

// ClearCard clears the "card" edge to the Card entity.
func (cfuo *CardFaceUpdateOne) ClearCard() *CardFaceUpdateOne {
	cfuo.mutation.ClearCard()
	return cfuo
}

// ClearPrintings clears all "printings" edges to the Printing entity.
func (cfuo *CardFaceUpdateOne) ClearPrintings() *CardFaceUpdateOne {
	cfuo.mutation.ClearPrintings()
	return cfuo
}

// RemovePrintingIDs removes the "printings" edge to Printing entities by IDs.
func (cfuo *CardFaceUpdateOne) RemovePrintingIDs(ids ...int) *CardFaceUpdateOne {
	cfuo.mutation.RemovePrintingIDs(ids...)
	return cfuo
}

// RemovePrintings removes "printings" edges to Printing entities.
func (cfuo *CardFaceUpdateOne) RemovePrintings(p ...*Printing) *CardFaceUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cfuo.RemovePrintingIDs(ids...)
}

// Where appends a list predicates to the CardFaceUpdate builder.
func (cfuo *CardFaceUpdateOne) Where(ps ...predicate.CardFace) *CardFaceUpdateOne {
	cfuo.mutation.Where(ps...)
	return cfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cfuo *CardFaceUpdateOne) Select(field string, fields ...string) *CardFaceUpdateOne {
	cfuo.fields = append([]string{field}, fields...)
	return cfuo
}

// Save executes the query and returns the updated CardFace entity.
func (cfuo *CardFaceUpdateOne) Save(ctx context.Context) (*CardFace, error) {
	return withHooks(ctx, cfuo.sqlSave, cfuo.mutation, cfuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cfuo *CardFaceUpdateOne) SaveX(ctx context.Context) *CardFace {
	node, err := cfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cfuo *CardFaceUpdateOne) Exec(ctx context.Context) error {
	_, err := cfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cfuo *CardFaceUpdateOne) ExecX(ctx context.Context) {
	if err := cfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cfuo *CardFaceUpdateOne) check() error {
	if v, ok := cfuo.mutation.Name(); ok {
		if err := cardface.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`oracledb: validator failed for field "CardFace.name": %w`, err)}
		}
	}
	if v, ok := cfuo.mutation.FlavorText(); ok {
		if err := cardface.FlavorTextValidator(v); err != nil {
			return &ValidationError{Name: "flavor_text", err: fmt.Errorf(`oracledb: validator failed for field "CardFace.flavor_text": %w`, err)}
		}
	}
	if v, ok := cfuo.mutation.OracleText(); ok {
		if err := cardface.OracleTextValidator(v); err != nil {
			return &ValidationError{Name: "oracle_text", err: fmt.Errorf(`oracledb: validator failed for field "CardFace.oracle_text": %w`, err)}
		}
	}
	return nil
}

func (cfuo *CardFaceUpdateOne) sqlSave(ctx context.Context) (_node *CardFace, err error) {
	if err := cfuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(cardface.Table, cardface.Columns, sqlgraph.NewFieldSpec(cardface.FieldID, field.TypeInt))
	id, ok := cfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`oracledb: missing "CardFace.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cardface.FieldID)
		for _, f := range fields {
			if !cardface.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("oracledb: invalid field %q for query", f)}
			}
			if f != cardface.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cfuo.mutation.Name(); ok {
		_spec.SetField(cardface.FieldName, field.TypeString, value)
	}
	if value, ok := cfuo.mutation.FlavorText(); ok {
		_spec.SetField(cardface.FieldFlavorText, field.TypeString, value)
	}
	if value, ok := cfuo.mutation.OracleText(); ok {
		_spec.SetField(cardface.FieldOracleText, field.TypeString, value)
	}
	if value, ok := cfuo.mutation.Language(); ok {
		_spec.SetField(cardface.FieldLanguage, field.TypeString, value)
	}
	if value, ok := cfuo.mutation.Cmc(); ok {
		_spec.SetField(cardface.FieldCmc, field.TypeFloat32, value)
	}
	if value, ok := cfuo.mutation.AddedCmc(); ok {
		_spec.AddField(cardface.FieldCmc, field.TypeFloat32, value)
	}
	if value, ok := cfuo.mutation.Power(); ok {
		_spec.SetField(cardface.FieldPower, field.TypeString, value)
	}
	if value, ok := cfuo.mutation.Toughness(); ok {
		_spec.SetField(cardface.FieldToughness, field.TypeString, value)
	}
	if value, ok := cfuo.mutation.Loyalty(); ok {
		_spec.SetField(cardface.FieldLoyalty, field.TypeString, value)
	}
	if value, ok := cfuo.mutation.ManaCost(); ok {
		_spec.SetField(cardface.FieldManaCost, field.TypeString, value)
	}
	if value, ok := cfuo.mutation.TypeLine(); ok {
		_spec.SetField(cardface.FieldTypeLine, field.TypeString, value)
	}
	if value, ok := cfuo.mutation.Colors(); ok {
		_spec.SetField(cardface.FieldColors, field.TypeString, value)
	}
	if cfuo.mutation.CardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cardface.CardTable,
			Columns: []string{cardface.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(card.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cfuo.mutation.CardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cardface.CardTable,
			Columns: []string{cardface.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(card.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cfuo.mutation.PrintingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   cardface.PrintingsTable,
			Columns: []string{cardface.PrintingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printing.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cfuo.mutation.RemovedPrintingsIDs(); len(nodes) > 0 && !cfuo.mutation.PrintingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   cardface.PrintingsTable,
			Columns: []string{cardface.PrintingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printing.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cfuo.mutation.PrintingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   cardface.PrintingsTable,
			Columns: []string{cardface.PrintingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printing.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CardFace{config: cfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cardface.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cfuo.mutation.done = true
	return _node, nil
}
