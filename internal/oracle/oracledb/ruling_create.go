// Code generated by ent, DO NOT EDIT.

package oracledb

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SethCurry/stax/internal/oracle/oracledb/card"
	"github.com/SethCurry/stax/internal/oracle/oracledb/ruling"
)

// RulingCreate is the builder for creating a Ruling entity.
type RulingCreate struct {
	config
	mutation *RulingMutation
	hooks    []Hook
}

// SetText sets the "text" field.
func (rc *RulingCreate) SetText(s string) *RulingCreate {
	rc.mutation.SetText(s)
	return rc
}

// SetDate sets the "date" field.
func (rc *RulingCreate) SetDate(t time.Time) *RulingCreate {
	rc.mutation.SetDate(t)
	return rc
}

// SetCardID sets the "card" edge to the Card entity by ID.
func (rc *RulingCreate) SetCardID(id int) *RulingCreate {
	rc.mutation.SetCardID(id)
	return rc
}

// SetNillableCardID sets the "card" edge to the Card entity by ID if the given value is not nil.
func (rc *RulingCreate) SetNillableCardID(id *int) *RulingCreate {
	if id != nil {
		rc = rc.SetCardID(*id)
	}
	return rc
}

// SetCard sets the "card" edge to the Card entity.
func (rc *RulingCreate) SetCard(c *Card) *RulingCreate {
	return rc.SetCardID(c.ID)
}

// Mutation returns the RulingMutation object of the builder.
func (rc *RulingCreate) Mutation() *RulingMutation {
	return rc.mutation
}

// Save creates the Ruling in the database.
func (rc *RulingCreate) Save(ctx context.Context) (*Ruling, error) {
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RulingCreate) SaveX(ctx context.Context) *Ruling {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RulingCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RulingCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RulingCreate) check() error {
	if _, ok := rc.mutation.Text(); !ok {
		return &ValidationError{Name: "text", err: errors.New(`oracledb: missing required field "Ruling.text"`)}
	}
	if v, ok := rc.mutation.Text(); ok {
		if err := ruling.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`oracledb: validator failed for field "Ruling.text": %w`, err)}
		}
	}
	if _, ok := rc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`oracledb: missing required field "Ruling.date"`)}
	}
	return nil
}

func (rc *RulingCreate) sqlSave(ctx context.Context) (*Ruling, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RulingCreate) createSpec() (*Ruling, *sqlgraph.CreateSpec) {
	var (
		_node = &Ruling{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(ruling.Table, sqlgraph.NewFieldSpec(ruling.FieldID, field.TypeInt))
	)
	if value, ok := rc.mutation.Text(); ok {
		_spec.SetField(ruling.FieldText, field.TypeString, value)
		_node.Text = value
	}
	if value, ok := rc.mutation.Date(); ok {
		_spec.SetField(ruling.FieldDate, field.TypeTime, value)
		_node.Date = value
	}
	if nodes := rc.mutation.CardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ruling.CardTable,
			Columns: []string{ruling.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(card.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ruling_card = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RulingCreateBulk is the builder for creating many Ruling entities in bulk.
type RulingCreateBulk struct {
	config
	err      error
	builders []*RulingCreate
}

// Save creates the Ruling entities in the database.
func (rcb *RulingCreateBulk) Save(ctx context.Context) ([]*Ruling, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Ruling, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RulingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RulingCreateBulk) SaveX(ctx context.Context) []*Ruling {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RulingCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RulingCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
