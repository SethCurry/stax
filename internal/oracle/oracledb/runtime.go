// Code generated by ent, DO NOT EDIT.

package oracledb

import (
	"github.com/SethCurry/stax/internal/oracle/oracledb/artist"
	"github.com/SethCurry/stax/internal/oracle/oracledb/card"
	"github.com/SethCurry/stax/internal/oracle/oracledb/cardface"
	"github.com/SethCurry/stax/internal/oracle/oracledb/printingimage"
	"github.com/SethCurry/stax/internal/oracle/oracledb/ruling"
	"github.com/SethCurry/stax/internal/oracle/oracledb/schema"
	"github.com/SethCurry/stax/internal/oracle/oracledb/set"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	artistFields := schema.Artist{}.Fields()
	_ = artistFields
	// artistDescName is the schema descriptor for name field.
	artistDescName := artistFields[0].Descriptor()
	// artist.NameValidator is a validator for the "name" field. It is called by the builders before save.
	artist.NameValidator = func() func(string) error {
		validators := artistDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	cardFields := schema.Card{}.Fields()
	_ = cardFields
	// cardDescName is the schema descriptor for name field.
	cardDescName := cardFields[0].Descriptor()
	// card.NameValidator is a validator for the "name" field. It is called by the builders before save.
	card.NameValidator = func() func(string) error {
		validators := cardDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// cardDescOracleID is the schema descriptor for oracle_id field.
	cardDescOracleID := cardFields[1].Descriptor()
	// card.OracleIDValidator is a validator for the "oracle_id" field. It is called by the builders before save.
	card.OracleIDValidator = cardDescOracleID.Validators[0].(func(string) error)
	cardfaceFields := schema.CardFace{}.Fields()
	_ = cardfaceFields
	// cardfaceDescName is the schema descriptor for name field.
	cardfaceDescName := cardfaceFields[0].Descriptor()
	// cardface.NameValidator is a validator for the "name" field. It is called by the builders before save.
	cardface.NameValidator = func() func(string) error {
		validators := cardfaceDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// cardfaceDescFlavorText is the schema descriptor for flavor_text field.
	cardfaceDescFlavorText := cardfaceFields[1].Descriptor()
	// cardface.FlavorTextValidator is a validator for the "flavor_text" field. It is called by the builders before save.
	cardface.FlavorTextValidator = cardfaceDescFlavorText.Validators[0].(func(string) error)
	// cardfaceDescOracleText is the schema descriptor for oracle_text field.
	cardfaceDescOracleText := cardfaceFields[2].Descriptor()
	// cardface.OracleTextValidator is a validator for the "oracle_text" field. It is called by the builders before save.
	cardface.OracleTextValidator = cardfaceDescOracleText.Validators[0].(func(string) error)
	printingimageFields := schema.PrintingImage{}.Fields()
	_ = printingimageFields
	// printingimageDescURL is the schema descriptor for url field.
	printingimageDescURL := printingimageFields[0].Descriptor()
	// printingimage.URLValidator is a validator for the "url" field. It is called by the builders before save.
	printingimage.URLValidator = printingimageDescURL.Validators[0].(func(string) error)
	rulingFields := schema.Ruling{}.Fields()
	_ = rulingFields
	// rulingDescText is the schema descriptor for text field.
	rulingDescText := rulingFields[0].Descriptor()
	// ruling.TextValidator is a validator for the "text" field. It is called by the builders before save.
	ruling.TextValidator = rulingDescText.Validators[0].(func(string) error)
	setFields := schema.Set{}.Fields()
	_ = setFields
	// setDescName is the schema descriptor for name field.
	setDescName := setFields[0].Descriptor()
	// set.NameValidator is a validator for the "name" field. It is called by the builders before save.
	set.NameValidator = func() func(string) error {
		validators := setDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// setDescCode is the schema descriptor for code field.
	setDescCode := setFields[1].Descriptor()
	// set.CodeValidator is a validator for the "code" field. It is called by the builders before save.
	set.CodeValidator = func() func(string) error {
		validators := setDescCode.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(code string) error {
			for _, fn := range fns {
				if err := fn(code); err != nil {
					return err
				}
			}
			return nil
		}
	}()
}
