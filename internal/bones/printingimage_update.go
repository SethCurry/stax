// Code generated by ent, DO NOT EDIT.

package bones

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SethCurry/stax/internal/bones/predicate"
	"github.com/SethCurry/stax/internal/bones/printing"
	"github.com/SethCurry/stax/internal/bones/printingimage"
)

// PrintingImageUpdate is the builder for updating PrintingImage entities.
type PrintingImageUpdate struct {
	config
	hooks    []Hook
	mutation *PrintingImageMutation
}

// Where appends a list predicates to the PrintingImageUpdate builder.
func (piu *PrintingImageUpdate) Where(ps ...predicate.PrintingImage) *PrintingImageUpdate {
	piu.mutation.Where(ps...)
	return piu
}

// SetURL sets the "url" field.
func (piu *PrintingImageUpdate) SetURL(s string) *PrintingImageUpdate {
	piu.mutation.SetURL(s)
	return piu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (piu *PrintingImageUpdate) SetNillableURL(s *string) *PrintingImageUpdate {
	if s != nil {
		piu.SetURL(*s)
	}
	return piu
}

// SetImageType sets the "image_type" field.
func (piu *PrintingImageUpdate) SetImageType(pt printingimage.ImageType) *PrintingImageUpdate {
	piu.mutation.SetImageType(pt)
	return piu
}

// SetNillableImageType sets the "image_type" field if the given value is not nil.
func (piu *PrintingImageUpdate) SetNillableImageType(pt *printingimage.ImageType) *PrintingImageUpdate {
	if pt != nil {
		piu.SetImageType(*pt)
	}
	return piu
}

// SetLocalPath sets the "local_path" field.
func (piu *PrintingImageUpdate) SetLocalPath(s string) *PrintingImageUpdate {
	piu.mutation.SetLocalPath(s)
	return piu
}

// SetNillableLocalPath sets the "local_path" field if the given value is not nil.
func (piu *PrintingImageUpdate) SetNillableLocalPath(s *string) *PrintingImageUpdate {
	if s != nil {
		piu.SetLocalPath(*s)
	}
	return piu
}

// ClearLocalPath clears the value of the "local_path" field.
func (piu *PrintingImageUpdate) ClearLocalPath() *PrintingImageUpdate {
	piu.mutation.ClearLocalPath()
	return piu
}

// SetPrintingID sets the "printing" edge to the Printing entity by ID.
func (piu *PrintingImageUpdate) SetPrintingID(id int) *PrintingImageUpdate {
	piu.mutation.SetPrintingID(id)
	return piu
}

// SetNillablePrintingID sets the "printing" edge to the Printing entity by ID if the given value is not nil.
func (piu *PrintingImageUpdate) SetNillablePrintingID(id *int) *PrintingImageUpdate {
	if id != nil {
		piu = piu.SetPrintingID(*id)
	}
	return piu
}

// SetPrinting sets the "printing" edge to the Printing entity.
func (piu *PrintingImageUpdate) SetPrinting(p *Printing) *PrintingImageUpdate {
	return piu.SetPrintingID(p.ID)
}

// Mutation returns the PrintingImageMutation object of the builder.
func (piu *PrintingImageUpdate) Mutation() *PrintingImageMutation {
	return piu.mutation
}

// ClearPrinting clears the "printing" edge to the Printing entity.
func (piu *PrintingImageUpdate) ClearPrinting() *PrintingImageUpdate {
	piu.mutation.ClearPrinting()
	return piu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (piu *PrintingImageUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, piu.sqlSave, piu.mutation, piu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piu *PrintingImageUpdate) SaveX(ctx context.Context) int {
	affected, err := piu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (piu *PrintingImageUpdate) Exec(ctx context.Context) error {
	_, err := piu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piu *PrintingImageUpdate) ExecX(ctx context.Context) {
	if err := piu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (piu *PrintingImageUpdate) check() error {
	if v, ok := piu.mutation.URL(); ok {
		if err := printingimage.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`bones: validator failed for field "PrintingImage.url": %w`, err)}
		}
	}
	if v, ok := piu.mutation.ImageType(); ok {
		if err := printingimage.ImageTypeValidator(v); err != nil {
			return &ValidationError{Name: "image_type", err: fmt.Errorf(`bones: validator failed for field "PrintingImage.image_type": %w`, err)}
		}
	}
	return nil
}

func (piu *PrintingImageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := piu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(printingimage.Table, printingimage.Columns, sqlgraph.NewFieldSpec(printingimage.FieldID, field.TypeInt))
	if ps := piu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piu.mutation.URL(); ok {
		_spec.SetField(printingimage.FieldURL, field.TypeString, value)
	}
	if value, ok := piu.mutation.ImageType(); ok {
		_spec.SetField(printingimage.FieldImageType, field.TypeEnum, value)
	}
	if value, ok := piu.mutation.LocalPath(); ok {
		_spec.SetField(printingimage.FieldLocalPath, field.TypeString, value)
	}
	if piu.mutation.LocalPathCleared() {
		_spec.ClearField(printingimage.FieldLocalPath, field.TypeString)
	}
	if piu.mutation.PrintingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   printingimage.PrintingTable,
			Columns: []string{printingimage.PrintingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printing.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.PrintingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   printingimage.PrintingTable,
			Columns: []string{printingimage.PrintingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printing.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, piu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{printingimage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	piu.mutation.done = true
	return n, nil
}

// PrintingImageUpdateOne is the builder for updating a single PrintingImage entity.
type PrintingImageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PrintingImageMutation
}

// SetURL sets the "url" field.
func (piuo *PrintingImageUpdateOne) SetURL(s string) *PrintingImageUpdateOne {
	piuo.mutation.SetURL(s)
	return piuo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (piuo *PrintingImageUpdateOne) SetNillableURL(s *string) *PrintingImageUpdateOne {
	if s != nil {
		piuo.SetURL(*s)
	}
	return piuo
}

// SetImageType sets the "image_type" field.
func (piuo *PrintingImageUpdateOne) SetImageType(pt printingimage.ImageType) *PrintingImageUpdateOne {
	piuo.mutation.SetImageType(pt)
	return piuo
}

// SetNillableImageType sets the "image_type" field if the given value is not nil.
func (piuo *PrintingImageUpdateOne) SetNillableImageType(pt *printingimage.ImageType) *PrintingImageUpdateOne {
	if pt != nil {
		piuo.SetImageType(*pt)
	}
	return piuo
}

// SetLocalPath sets the "local_path" field.
func (piuo *PrintingImageUpdateOne) SetLocalPath(s string) *PrintingImageUpdateOne {
	piuo.mutation.SetLocalPath(s)
	return piuo
}

// SetNillableLocalPath sets the "local_path" field if the given value is not nil.
func (piuo *PrintingImageUpdateOne) SetNillableLocalPath(s *string) *PrintingImageUpdateOne {
	if s != nil {
		piuo.SetLocalPath(*s)
	}
	return piuo
}

// ClearLocalPath clears the value of the "local_path" field.
func (piuo *PrintingImageUpdateOne) ClearLocalPath() *PrintingImageUpdateOne {
	piuo.mutation.ClearLocalPath()
	return piuo
}

// SetPrintingID sets the "printing" edge to the Printing entity by ID.
func (piuo *PrintingImageUpdateOne) SetPrintingID(id int) *PrintingImageUpdateOne {
	piuo.mutation.SetPrintingID(id)
	return piuo
}

// SetNillablePrintingID sets the "printing" edge to the Printing entity by ID if the given value is not nil.
func (piuo *PrintingImageUpdateOne) SetNillablePrintingID(id *int) *PrintingImageUpdateOne {
	if id != nil {
		piuo = piuo.SetPrintingID(*id)
	}
	return piuo
}

// SetPrinting sets the "printing" edge to the Printing entity.
func (piuo *PrintingImageUpdateOne) SetPrinting(p *Printing) *PrintingImageUpdateOne {
	return piuo.SetPrintingID(p.ID)
}

// Mutation returns the PrintingImageMutation object of the builder.
func (piuo *PrintingImageUpdateOne) Mutation() *PrintingImageMutation {
	return piuo.mutation
}

// ClearPrinting clears the "printing" edge to the Printing entity.
func (piuo *PrintingImageUpdateOne) ClearPrinting() *PrintingImageUpdateOne {
	piuo.mutation.ClearPrinting()
	return piuo
}

// Where appends a list predicates to the PrintingImageUpdate builder.
func (piuo *PrintingImageUpdateOne) Where(ps ...predicate.PrintingImage) *PrintingImageUpdateOne {
	piuo.mutation.Where(ps...)
	return piuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (piuo *PrintingImageUpdateOne) Select(field string, fields ...string) *PrintingImageUpdateOne {
	piuo.fields = append([]string{field}, fields...)
	return piuo
}

// Save executes the query and returns the updated PrintingImage entity.
func (piuo *PrintingImageUpdateOne) Save(ctx context.Context) (*PrintingImage, error) {
	return withHooks(ctx, piuo.sqlSave, piuo.mutation, piuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piuo *PrintingImageUpdateOne) SaveX(ctx context.Context) *PrintingImage {
	node, err := piuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (piuo *PrintingImageUpdateOne) Exec(ctx context.Context) error {
	_, err := piuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piuo *PrintingImageUpdateOne) ExecX(ctx context.Context) {
	if err := piuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (piuo *PrintingImageUpdateOne) check() error {
	if v, ok := piuo.mutation.URL(); ok {
		if err := printingimage.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`bones: validator failed for field "PrintingImage.url": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.ImageType(); ok {
		if err := printingimage.ImageTypeValidator(v); err != nil {
			return &ValidationError{Name: "image_type", err: fmt.Errorf(`bones: validator failed for field "PrintingImage.image_type": %w`, err)}
		}
	}
	return nil
}

func (piuo *PrintingImageUpdateOne) sqlSave(ctx context.Context) (_node *PrintingImage, err error) {
	if err := piuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(printingimage.Table, printingimage.Columns, sqlgraph.NewFieldSpec(printingimage.FieldID, field.TypeInt))
	id, ok := piuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`bones: missing "PrintingImage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := piuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, printingimage.FieldID)
		for _, f := range fields {
			if !printingimage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("bones: invalid field %q for query", f)}
			}
			if f != printingimage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := piuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piuo.mutation.URL(); ok {
		_spec.SetField(printingimage.FieldURL, field.TypeString, value)
	}
	if value, ok := piuo.mutation.ImageType(); ok {
		_spec.SetField(printingimage.FieldImageType, field.TypeEnum, value)
	}
	if value, ok := piuo.mutation.LocalPath(); ok {
		_spec.SetField(printingimage.FieldLocalPath, field.TypeString, value)
	}
	if piuo.mutation.LocalPathCleared() {
		_spec.ClearField(printingimage.FieldLocalPath, field.TypeString)
	}
	if piuo.mutation.PrintingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   printingimage.PrintingTable,
			Columns: []string{printingimage.PrintingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printing.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.PrintingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   printingimage.PrintingTable,
			Columns: []string{printingimage.PrintingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printing.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PrintingImage{config: piuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, piuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{printingimage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	piuo.mutation.done = true
	return _node, nil
}
