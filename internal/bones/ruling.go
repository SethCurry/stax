// Code generated by ent, DO NOT EDIT.

package bones

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/SethCurry/stax/internal/bones/card"
	"github.com/SethCurry/stax/internal/bones/ruling"
)

// Ruling is the model entity for the Ruling schema.
type Ruling struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Text holds the value of the "text" field.
	Text string `json:"text,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RulingQuery when eager-loading is set.
	Edges        RulingEdges `json:"edges"`
	ruling_card  *int
	selectValues sql.SelectValues
}

// RulingEdges holds the relations/edges for other nodes in the graph.
type RulingEdges struct {
	// Card holds the value of the card edge.
	Card *Card `json:"card,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CardOrErr returns the Card value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RulingEdges) CardOrErr() (*Card, error) {
	if e.Card != nil {
		return e.Card, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: card.Label}
	}
	return nil, &NotLoadedError{edge: "card"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Ruling) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ruling.FieldID:
			values[i] = new(sql.NullInt64)
		case ruling.FieldText:
			values[i] = new(sql.NullString)
		case ruling.FieldDate:
			values[i] = new(sql.NullTime)
		case ruling.ForeignKeys[0]: // ruling_card
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Ruling fields.
func (r *Ruling) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ruling.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case ruling.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				r.Text = value.String
			}
		case ruling.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				r.Date = value.Time
			}
		case ruling.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field ruling_card", value)
			} else if value.Valid {
				r.ruling_card = new(int)
				*r.ruling_card = int(value.Int64)
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Ruling.
// This includes values selected through modifiers, order, etc.
func (r *Ruling) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryCard queries the "card" edge of the Ruling entity.
func (r *Ruling) QueryCard() *CardQuery {
	return NewRulingClient(r.config).QueryCard(r)
}

// Update returns a builder for updating this Ruling.
// Note that you need to call Ruling.Unwrap() before calling this method if this Ruling
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Ruling) Update() *RulingUpdateOne {
	return NewRulingClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Ruling entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Ruling) Unwrap() *Ruling {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("bones: Ruling is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Ruling) String() string {
	var builder strings.Builder
	builder.WriteString("Ruling(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("text=")
	builder.WriteString(r.Text)
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(r.Date.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Rulings is a parsable slice of Ruling.
type Rulings []*Ruling
