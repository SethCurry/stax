// Code generated by ent, DO NOT EDIT.

package bones

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/SethCurry/stax/internal/bones/artist"
	"github.com/SethCurry/stax/internal/bones/cardface"
	"github.com/SethCurry/stax/internal/bones/printing"
	"github.com/SethCurry/stax/internal/bones/set"
)

// Printing is the model entity for the Printing schema.
type Printing struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Rarity holds the value of the "rarity" field.
	Rarity printing.Rarity `json:"rarity,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PrintingQuery when eager-loading is set.
	Edges              PrintingEdges `json:"edges"`
	printing_artist    *int
	printing_set       *int
	printing_card_face *int
	selectValues       sql.SelectValues
}

// PrintingEdges holds the relations/edges for other nodes in the graph.
type PrintingEdges struct {
	// Artist holds the value of the artist edge.
	Artist *Artist `json:"artist,omitempty"`
	// Set holds the value of the set edge.
	Set *Set `json:"set,omitempty"`
	// CardFace holds the value of the card_face edge.
	CardFace *CardFace `json:"card_face,omitempty"`
	// Images holds the value of the images edge.
	Images []*PrintingImage `json:"images,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// ArtistOrErr returns the Artist value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PrintingEdges) ArtistOrErr() (*Artist, error) {
	if e.Artist != nil {
		return e.Artist, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: artist.Label}
	}
	return nil, &NotLoadedError{edge: "artist"}
}

// SetOrErr returns the Set value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PrintingEdges) SetOrErr() (*Set, error) {
	if e.Set != nil {
		return e.Set, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: set.Label}
	}
	return nil, &NotLoadedError{edge: "set"}
}

// CardFaceOrErr returns the CardFace value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PrintingEdges) CardFaceOrErr() (*CardFace, error) {
	if e.CardFace != nil {
		return e.CardFace, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: cardface.Label}
	}
	return nil, &NotLoadedError{edge: "card_face"}
}

// ImagesOrErr returns the Images value or an error if the edge
// was not loaded in eager-loading.
func (e PrintingEdges) ImagesOrErr() ([]*PrintingImage, error) {
	if e.loadedTypes[3] {
		return e.Images, nil
	}
	return nil, &NotLoadedError{edge: "images"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Printing) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case printing.FieldID:
			values[i] = new(sql.NullInt64)
		case printing.FieldRarity:
			values[i] = new(sql.NullString)
		case printing.ForeignKeys[0]: // printing_artist
			values[i] = new(sql.NullInt64)
		case printing.ForeignKeys[1]: // printing_set
			values[i] = new(sql.NullInt64)
		case printing.ForeignKeys[2]: // printing_card_face
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Printing fields.
func (pr *Printing) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case printing.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case printing.FieldRarity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field rarity", values[i])
			} else if value.Valid {
				pr.Rarity = printing.Rarity(value.String)
			}
		case printing.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field printing_artist", value)
			} else if value.Valid {
				pr.printing_artist = new(int)
				*pr.printing_artist = int(value.Int64)
			}
		case printing.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field printing_set", value)
			} else if value.Valid {
				pr.printing_set = new(int)
				*pr.printing_set = int(value.Int64)
			}
		case printing.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field printing_card_face", value)
			} else if value.Valid {
				pr.printing_card_face = new(int)
				*pr.printing_card_face = int(value.Int64)
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Printing.
// This includes values selected through modifiers, order, etc.
func (pr *Printing) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryArtist queries the "artist" edge of the Printing entity.
func (pr *Printing) QueryArtist() *ArtistQuery {
	return NewPrintingClient(pr.config).QueryArtist(pr)
}

// QuerySet queries the "set" edge of the Printing entity.
func (pr *Printing) QuerySet() *SetQuery {
	return NewPrintingClient(pr.config).QuerySet(pr)
}

// QueryCardFace queries the "card_face" edge of the Printing entity.
func (pr *Printing) QueryCardFace() *CardFaceQuery {
	return NewPrintingClient(pr.config).QueryCardFace(pr)
}

// QueryImages queries the "images" edge of the Printing entity.
func (pr *Printing) QueryImages() *PrintingImageQuery {
	return NewPrintingClient(pr.config).QueryImages(pr)
}

// Update returns a builder for updating this Printing.
// Note that you need to call Printing.Unwrap() before calling this method if this Printing
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Printing) Update() *PrintingUpdateOne {
	return NewPrintingClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Printing entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Printing) Unwrap() *Printing {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("bones: Printing is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Printing) String() string {
	var builder strings.Builder
	builder.WriteString("Printing(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("rarity=")
	builder.WriteString(fmt.Sprintf("%v", pr.Rarity))
	builder.WriteByte(')')
	return builder.String()
}

// Printings is a parsable slice of Printing.
type Printings []*Printing
