// Code generated by ent, DO NOT EDIT.

package printingimage

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the printingimage type in the database.
	Label = "printing_image"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldImageType holds the string denoting the image_type field in the database.
	FieldImageType = "image_type"
	// FieldLocalPath holds the string denoting the local_path field in the database.
	FieldLocalPath = "local_path"
	// EdgePrinting holds the string denoting the printing edge name in mutations.
	EdgePrinting = "printing"
	// Table holds the table name of the printingimage in the database.
	Table = "printing_images"
	// PrintingTable is the table that holds the printing relation/edge.
	PrintingTable = "printing_images"
	// PrintingInverseTable is the table name for the Printing entity.
	// It exists in this package in order to avoid circular dependency with the "printing" package.
	PrintingInverseTable = "printings"
	// PrintingColumn is the table column denoting the printing relation/edge.
	PrintingColumn = "printing_image_printing"
)

// Columns holds all SQL columns for printingimage fields.
var Columns = []string{
	FieldID,
	FieldURL,
	FieldImageType,
	FieldLocalPath,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "printing_images"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"printing_image_printing",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// URLValidator is a validator for the "url" field. It is called by the builders before save.
	URLValidator func(string) error
)

// ImageType defines the type for the "image_type" enum field.
type ImageType string

// ImageType values.
const (
	ImageTypeSmall      ImageType = "small"
	ImageTypeNormal     ImageType = "normal"
	ImageTypeLarge      ImageType = "large"
	ImageTypePng        ImageType = "png"
	ImageTypeArtCrop    ImageType = "art_crop"
	ImageTypeBorderCrop ImageType = "border_crop"
)

func (it ImageType) String() string {
	return string(it)
}

// ImageTypeValidator is a validator for the "image_type" field enum values. It is called by the builders before save.
func ImageTypeValidator(it ImageType) error {
	switch it {
	case ImageTypeSmall, ImageTypeNormal, ImageTypeLarge, ImageTypePng, ImageTypeArtCrop, ImageTypeBorderCrop:
		return nil
	default:
		return fmt.Errorf("printingimage: invalid enum value for image_type field: %q", it)
	}
}

// OrderOption defines the ordering options for the PrintingImage queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByURL orders the results by the url field.
func ByURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURL, opts...).ToFunc()
}

// ByImageType orders the results by the image_type field.
func ByImageType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImageType, opts...).ToFunc()
}

// ByLocalPath orders the results by the local_path field.
func ByLocalPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalPath, opts...).ToFunc()
}

// ByPrintingField orders the results by printing field.
func ByPrintingField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPrintingStep(), sql.OrderByField(field, opts...))
	}
}
func newPrintingStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PrintingInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, PrintingTable, PrintingColumn),
	)
}
