// Code generated by ent, DO NOT EDIT.

package bones

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SethCurry/stax/internal/bones/card"
	"github.com/SethCurry/stax/internal/bones/predicate"
	"github.com/SethCurry/stax/internal/bones/ruling"
)

// RulingUpdate is the builder for updating Ruling entities.
type RulingUpdate struct {
	config
	hooks    []Hook
	mutation *RulingMutation
}

// Where appends a list predicates to the RulingUpdate builder.
func (ru *RulingUpdate) Where(ps ...predicate.Ruling) *RulingUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetText sets the "text" field.
func (ru *RulingUpdate) SetText(s string) *RulingUpdate {
	ru.mutation.SetText(s)
	return ru
}

// SetNillableText sets the "text" field if the given value is not nil.
func (ru *RulingUpdate) SetNillableText(s *string) *RulingUpdate {
	if s != nil {
		ru.SetText(*s)
	}
	return ru
}

// SetDate sets the "date" field.
func (ru *RulingUpdate) SetDate(t time.Time) *RulingUpdate {
	ru.mutation.SetDate(t)
	return ru
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (ru *RulingUpdate) SetNillableDate(t *time.Time) *RulingUpdate {
	if t != nil {
		ru.SetDate(*t)
	}
	return ru
}

// SetCardID sets the "card" edge to the Card entity by ID.
func (ru *RulingUpdate) SetCardID(id int) *RulingUpdate {
	ru.mutation.SetCardID(id)
	return ru
}

// SetNillableCardID sets the "card" edge to the Card entity by ID if the given value is not nil.
func (ru *RulingUpdate) SetNillableCardID(id *int) *RulingUpdate {
	if id != nil {
		ru = ru.SetCardID(*id)
	}
	return ru
}

// SetCard sets the "card" edge to the Card entity.
func (ru *RulingUpdate) SetCard(c *Card) *RulingUpdate {
	return ru.SetCardID(c.ID)
}

// Mutation returns the RulingMutation object of the builder.
func (ru *RulingUpdate) Mutation() *RulingMutation {
	return ru.mutation
}

// ClearCard clears the "card" edge to the Card entity.
func (ru *RulingUpdate) ClearCard() *RulingUpdate {
	ru.mutation.ClearCard()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RulingUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RulingUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RulingUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RulingUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RulingUpdate) check() error {
	if v, ok := ru.mutation.Text(); ok {
		if err := ruling.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`bones: validator failed for field "Ruling.text": %w`, err)}
		}
	}
	return nil
}

func (ru *RulingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(ruling.Table, ruling.Columns, sqlgraph.NewFieldSpec(ruling.FieldID, field.TypeInt))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Text(); ok {
		_spec.SetField(ruling.FieldText, field.TypeString, value)
	}
	if value, ok := ru.mutation.Date(); ok {
		_spec.SetField(ruling.FieldDate, field.TypeTime, value)
	}
	if ru.mutation.CardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ruling.CardTable,
			Columns: []string{ruling.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(card.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.CardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ruling.CardTable,
			Columns: []string{ruling.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(card.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ruling.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RulingUpdateOne is the builder for updating a single Ruling entity.
type RulingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RulingMutation
}

// SetText sets the "text" field.
func (ruo *RulingUpdateOne) SetText(s string) *RulingUpdateOne {
	ruo.mutation.SetText(s)
	return ruo
}

// SetNillableText sets the "text" field if the given value is not nil.
func (ruo *RulingUpdateOne) SetNillableText(s *string) *RulingUpdateOne {
	if s != nil {
		ruo.SetText(*s)
	}
	return ruo
}

// SetDate sets the "date" field.
func (ruo *RulingUpdateOne) SetDate(t time.Time) *RulingUpdateOne {
	ruo.mutation.SetDate(t)
	return ruo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (ruo *RulingUpdateOne) SetNillableDate(t *time.Time) *RulingUpdateOne {
	if t != nil {
		ruo.SetDate(*t)
	}
	return ruo
}

// SetCardID sets the "card" edge to the Card entity by ID.
func (ruo *RulingUpdateOne) SetCardID(id int) *RulingUpdateOne {
	ruo.mutation.SetCardID(id)
	return ruo
}

// SetNillableCardID sets the "card" edge to the Card entity by ID if the given value is not nil.
func (ruo *RulingUpdateOne) SetNillableCardID(id *int) *RulingUpdateOne {
	if id != nil {
		ruo = ruo.SetCardID(*id)
	}
	return ruo
}

// SetCard sets the "card" edge to the Card entity.
func (ruo *RulingUpdateOne) SetCard(c *Card) *RulingUpdateOne {
	return ruo.SetCardID(c.ID)
}

// Mutation returns the RulingMutation object of the builder.
func (ruo *RulingUpdateOne) Mutation() *RulingMutation {
	return ruo.mutation
}

// ClearCard clears the "card" edge to the Card entity.
func (ruo *RulingUpdateOne) ClearCard() *RulingUpdateOne {
	ruo.mutation.ClearCard()
	return ruo
}

// Where appends a list predicates to the RulingUpdate builder.
func (ruo *RulingUpdateOne) Where(ps ...predicate.Ruling) *RulingUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RulingUpdateOne) Select(field string, fields ...string) *RulingUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Ruling entity.
func (ruo *RulingUpdateOne) Save(ctx context.Context) (*Ruling, error) {
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RulingUpdateOne) SaveX(ctx context.Context) *Ruling {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RulingUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RulingUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RulingUpdateOne) check() error {
	if v, ok := ruo.mutation.Text(); ok {
		if err := ruling.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`bones: validator failed for field "Ruling.text": %w`, err)}
		}
	}
	return nil
}

func (ruo *RulingUpdateOne) sqlSave(ctx context.Context) (_node *Ruling, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(ruling.Table, ruling.Columns, sqlgraph.NewFieldSpec(ruling.FieldID, field.TypeInt))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`bones: missing "Ruling.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ruling.FieldID)
		for _, f := range fields {
			if !ruling.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("bones: invalid field %q for query", f)}
			}
			if f != ruling.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Text(); ok {
		_spec.SetField(ruling.FieldText, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Date(); ok {
		_spec.SetField(ruling.FieldDate, field.TypeTime, value)
	}
	if ruo.mutation.CardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ruling.CardTable,
			Columns: []string{ruling.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(card.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.CardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ruling.CardTable,
			Columns: []string{ruling.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(card.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Ruling{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ruling.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
