// Code generated by ent, DO NOT EDIT.

package bones

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SethCurry/stax/internal/bones/card"
	"github.com/SethCurry/stax/internal/bones/cardface"
	"github.com/SethCurry/stax/internal/bones/printing"
)

// CardFaceCreate is the builder for creating a CardFace entity.
type CardFaceCreate struct {
	config
	mutation *CardFaceMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (cfc *CardFaceCreate) SetName(s string) *CardFaceCreate {
	cfc.mutation.SetName(s)
	return cfc
}

// SetFlavorText sets the "flavor_text" field.
func (cfc *CardFaceCreate) SetFlavorText(s string) *CardFaceCreate {
	cfc.mutation.SetFlavorText(s)
	return cfc
}

// SetOracleText sets the "oracle_text" field.
func (cfc *CardFaceCreate) SetOracleText(s string) *CardFaceCreate {
	cfc.mutation.SetOracleText(s)
	return cfc
}

// SetLanguage sets the "language" field.
func (cfc *CardFaceCreate) SetLanguage(s string) *CardFaceCreate {
	cfc.mutation.SetLanguage(s)
	return cfc
}

// SetCmc sets the "cmc" field.
func (cfc *CardFaceCreate) SetCmc(f float32) *CardFaceCreate {
	cfc.mutation.SetCmc(f)
	return cfc
}

// SetPower sets the "power" field.
func (cfc *CardFaceCreate) SetPower(s string) *CardFaceCreate {
	cfc.mutation.SetPower(s)
	return cfc
}

// SetToughness sets the "toughness" field.
func (cfc *CardFaceCreate) SetToughness(s string) *CardFaceCreate {
	cfc.mutation.SetToughness(s)
	return cfc
}

// SetLoyalty sets the "loyalty" field.
func (cfc *CardFaceCreate) SetLoyalty(s string) *CardFaceCreate {
	cfc.mutation.SetLoyalty(s)
	return cfc
}

// SetManaCost sets the "mana_cost" field.
func (cfc *CardFaceCreate) SetManaCost(s string) *CardFaceCreate {
	cfc.mutation.SetManaCost(s)
	return cfc
}

// SetTypeLine sets the "type_line" field.
func (cfc *CardFaceCreate) SetTypeLine(s string) *CardFaceCreate {
	cfc.mutation.SetTypeLine(s)
	return cfc
}

// SetColors sets the "colors" field.
func (cfc *CardFaceCreate) SetColors(s string) *CardFaceCreate {
	cfc.mutation.SetColors(s)
	return cfc
}

// SetCardID sets the "card" edge to the Card entity by ID.
func (cfc *CardFaceCreate) SetCardID(id int) *CardFaceCreate {
	cfc.mutation.SetCardID(id)
	return cfc
}

// SetNillableCardID sets the "card" edge to the Card entity by ID if the given value is not nil.
func (cfc *CardFaceCreate) SetNillableCardID(id *int) *CardFaceCreate {
	if id != nil {
		cfc = cfc.SetCardID(*id)
	}
	return cfc
}

// SetCard sets the "card" edge to the Card entity.
func (cfc *CardFaceCreate) SetCard(c *Card) *CardFaceCreate {
	return cfc.SetCardID(c.ID)
}

// AddPrintingIDs adds the "printings" edge to the Printing entity by IDs.
func (cfc *CardFaceCreate) AddPrintingIDs(ids ...int) *CardFaceCreate {
	cfc.mutation.AddPrintingIDs(ids...)
	return cfc
}

// AddPrintings adds the "printings" edges to the Printing entity.
func (cfc *CardFaceCreate) AddPrintings(p ...*Printing) *CardFaceCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cfc.AddPrintingIDs(ids...)
}

// Mutation returns the CardFaceMutation object of the builder.
func (cfc *CardFaceCreate) Mutation() *CardFaceMutation {
	return cfc.mutation
}

// Save creates the CardFace in the database.
func (cfc *CardFaceCreate) Save(ctx context.Context) (*CardFace, error) {
	return withHooks(ctx, cfc.sqlSave, cfc.mutation, cfc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cfc *CardFaceCreate) SaveX(ctx context.Context) *CardFace {
	v, err := cfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cfc *CardFaceCreate) Exec(ctx context.Context) error {
	_, err := cfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cfc *CardFaceCreate) ExecX(ctx context.Context) {
	if err := cfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cfc *CardFaceCreate) check() error {
	if _, ok := cfc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`bones: missing required field "CardFace.name"`)}
	}
	if v, ok := cfc.mutation.Name(); ok {
		if err := cardface.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`bones: validator failed for field "CardFace.name": %w`, err)}
		}
	}
	if _, ok := cfc.mutation.FlavorText(); !ok {
		return &ValidationError{Name: "flavor_text", err: errors.New(`bones: missing required field "CardFace.flavor_text"`)}
	}
	if v, ok := cfc.mutation.FlavorText(); ok {
		if err := cardface.FlavorTextValidator(v); err != nil {
			return &ValidationError{Name: "flavor_text", err: fmt.Errorf(`bones: validator failed for field "CardFace.flavor_text": %w`, err)}
		}
	}
	if _, ok := cfc.mutation.OracleText(); !ok {
		return &ValidationError{Name: "oracle_text", err: errors.New(`bones: missing required field "CardFace.oracle_text"`)}
	}
	if v, ok := cfc.mutation.OracleText(); ok {
		if err := cardface.OracleTextValidator(v); err != nil {
			return &ValidationError{Name: "oracle_text", err: fmt.Errorf(`bones: validator failed for field "CardFace.oracle_text": %w`, err)}
		}
	}
	if _, ok := cfc.mutation.Language(); !ok {
		return &ValidationError{Name: "language", err: errors.New(`bones: missing required field "CardFace.language"`)}
	}
	if _, ok := cfc.mutation.Cmc(); !ok {
		return &ValidationError{Name: "cmc", err: errors.New(`bones: missing required field "CardFace.cmc"`)}
	}
	if _, ok := cfc.mutation.Power(); !ok {
		return &ValidationError{Name: "power", err: errors.New(`bones: missing required field "CardFace.power"`)}
	}
	if _, ok := cfc.mutation.Toughness(); !ok {
		return &ValidationError{Name: "toughness", err: errors.New(`bones: missing required field "CardFace.toughness"`)}
	}
	if _, ok := cfc.mutation.Loyalty(); !ok {
		return &ValidationError{Name: "loyalty", err: errors.New(`bones: missing required field "CardFace.loyalty"`)}
	}
	if _, ok := cfc.mutation.ManaCost(); !ok {
		return &ValidationError{Name: "mana_cost", err: errors.New(`bones: missing required field "CardFace.mana_cost"`)}
	}
	if _, ok := cfc.mutation.TypeLine(); !ok {
		return &ValidationError{Name: "type_line", err: errors.New(`bones: missing required field "CardFace.type_line"`)}
	}
	if _, ok := cfc.mutation.Colors(); !ok {
		return &ValidationError{Name: "colors", err: errors.New(`bones: missing required field "CardFace.colors"`)}
	}
	return nil
}

func (cfc *CardFaceCreate) sqlSave(ctx context.Context) (*CardFace, error) {
	if err := cfc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cfc.mutation.id = &_node.ID
	cfc.mutation.done = true
	return _node, nil
}

func (cfc *CardFaceCreate) createSpec() (*CardFace, *sqlgraph.CreateSpec) {
	var (
		_node = &CardFace{config: cfc.config}
		_spec = sqlgraph.NewCreateSpec(cardface.Table, sqlgraph.NewFieldSpec(cardface.FieldID, field.TypeInt))
	)
	if value, ok := cfc.mutation.Name(); ok {
		_spec.SetField(cardface.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cfc.mutation.FlavorText(); ok {
		_spec.SetField(cardface.FieldFlavorText, field.TypeString, value)
		_node.FlavorText = value
	}
	if value, ok := cfc.mutation.OracleText(); ok {
		_spec.SetField(cardface.FieldOracleText, field.TypeString, value)
		_node.OracleText = value
	}
	if value, ok := cfc.mutation.Language(); ok {
		_spec.SetField(cardface.FieldLanguage, field.TypeString, value)
		_node.Language = value
	}
	if value, ok := cfc.mutation.Cmc(); ok {
		_spec.SetField(cardface.FieldCmc, field.TypeFloat32, value)
		_node.Cmc = value
	}
	if value, ok := cfc.mutation.Power(); ok {
		_spec.SetField(cardface.FieldPower, field.TypeString, value)
		_node.Power = value
	}
	if value, ok := cfc.mutation.Toughness(); ok {
		_spec.SetField(cardface.FieldToughness, field.TypeString, value)
		_node.Toughness = value
	}
	if value, ok := cfc.mutation.Loyalty(); ok {
		_spec.SetField(cardface.FieldLoyalty, field.TypeString, value)
		_node.Loyalty = value
	}
	if value, ok := cfc.mutation.ManaCost(); ok {
		_spec.SetField(cardface.FieldManaCost, field.TypeString, value)
		_node.ManaCost = value
	}
	if value, ok := cfc.mutation.TypeLine(); ok {
		_spec.SetField(cardface.FieldTypeLine, field.TypeString, value)
		_node.TypeLine = value
	}
	if value, ok := cfc.mutation.Colors(); ok {
		_spec.SetField(cardface.FieldColors, field.TypeString, value)
		_node.Colors = value
	}
	if nodes := cfc.mutation.CardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cardface.CardTable,
			Columns: []string{cardface.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(card.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.card_face_card = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cfc.mutation.PrintingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   cardface.PrintingsTable,
			Columns: []string{cardface.PrintingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printing.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CardFaceCreateBulk is the builder for creating many CardFace entities in bulk.
type CardFaceCreateBulk struct {
	config
	err      error
	builders []*CardFaceCreate
}

// Save creates the CardFace entities in the database.
func (cfcb *CardFaceCreateBulk) Save(ctx context.Context) ([]*CardFace, error) {
	if cfcb.err != nil {
		return nil, cfcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cfcb.builders))
	nodes := make([]*CardFace, len(cfcb.builders))
	mutators := make([]Mutator, len(cfcb.builders))
	for i := range cfcb.builders {
		func(i int, root context.Context) {
			builder := cfcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CardFaceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cfcb *CardFaceCreateBulk) SaveX(ctx context.Context) []*CardFace {
	v, err := cfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cfcb *CardFaceCreateBulk) Exec(ctx context.Context) error {
	_, err := cfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cfcb *CardFaceCreateBulk) ExecX(ctx context.Context) {
	if err := cfcb.Exec(ctx); err != nil {
		panic(err)
	}
}
