// Code generated by ent, DO NOT EDIT.

package bones

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SethCurry/stax/internal/bones/predicate"
	"github.com/SethCurry/stax/internal/bones/printing"
	"github.com/SethCurry/stax/internal/bones/set"
)

// SetUpdate is the builder for updating Set entities.
type SetUpdate struct {
	config
	hooks    []Hook
	mutation *SetMutation
}

// Where appends a list predicates to the SetUpdate builder.
func (su *SetUpdate) Where(ps ...predicate.Set) *SetUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetName sets the "name" field.
func (su *SetUpdate) SetName(s string) *SetUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *SetUpdate) SetNillableName(s *string) *SetUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// SetCode sets the "code" field.
func (su *SetUpdate) SetCode(s string) *SetUpdate {
	su.mutation.SetCode(s)
	return su
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (su *SetUpdate) SetNillableCode(s *string) *SetUpdate {
	if s != nil {
		su.SetCode(*s)
	}
	return su
}

// AddPrintingIDs adds the "printings" edge to the Printing entity by IDs.
func (su *SetUpdate) AddPrintingIDs(ids ...int) *SetUpdate {
	su.mutation.AddPrintingIDs(ids...)
	return su
}

// AddPrintings adds the "printings" edges to the Printing entity.
func (su *SetUpdate) AddPrintings(p ...*Printing) *SetUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.AddPrintingIDs(ids...)
}

// Mutation returns the SetMutation object of the builder.
func (su *SetUpdate) Mutation() *SetMutation {
	return su.mutation
}

// ClearPrintings clears all "printings" edges to the Printing entity.
func (su *SetUpdate) ClearPrintings() *SetUpdate {
	su.mutation.ClearPrintings()
	return su
}

// RemovePrintingIDs removes the "printings" edge to Printing entities by IDs.
func (su *SetUpdate) RemovePrintingIDs(ids ...int) *SetUpdate {
	su.mutation.RemovePrintingIDs(ids...)
	return su
}

// RemovePrintings removes "printings" edges to Printing entities.
func (su *SetUpdate) RemovePrintings(p ...*Printing) *SetUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.RemovePrintingIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SetUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SetUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SetUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SetUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SetUpdate) check() error {
	if v, ok := su.mutation.Name(); ok {
		if err := set.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`bones: validator failed for field "Set.name": %w`, err)}
		}
	}
	if v, ok := su.mutation.Code(); ok {
		if err := set.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`bones: validator failed for field "Set.code": %w`, err)}
		}
	}
	return nil
}

func (su *SetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(set.Table, set.Columns, sqlgraph.NewFieldSpec(set.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(set.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Code(); ok {
		_spec.SetField(set.FieldCode, field.TypeString, value)
	}
	if su.mutation.PrintingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   set.PrintingsTable,
			Columns: []string{set.PrintingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printing.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedPrintingsIDs(); len(nodes) > 0 && !su.mutation.PrintingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   set.PrintingsTable,
			Columns: []string{set.PrintingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printing.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.PrintingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   set.PrintingsTable,
			Columns: []string{set.PrintingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printing.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{set.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SetUpdateOne is the builder for updating a single Set entity.
type SetUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SetMutation
}

// SetName sets the "name" field.
func (suo *SetUpdateOne) SetName(s string) *SetUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *SetUpdateOne) SetNillableName(s *string) *SetUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// SetCode sets the "code" field.
func (suo *SetUpdateOne) SetCode(s string) *SetUpdateOne {
	suo.mutation.SetCode(s)
	return suo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (suo *SetUpdateOne) SetNillableCode(s *string) *SetUpdateOne {
	if s != nil {
		suo.SetCode(*s)
	}
	return suo
}

// AddPrintingIDs adds the "printings" edge to the Printing entity by IDs.
func (suo *SetUpdateOne) AddPrintingIDs(ids ...int) *SetUpdateOne {
	suo.mutation.AddPrintingIDs(ids...)
	return suo
}

// AddPrintings adds the "printings" edges to the Printing entity.
func (suo *SetUpdateOne) AddPrintings(p ...*Printing) *SetUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.AddPrintingIDs(ids...)
}

// Mutation returns the SetMutation object of the builder.
func (suo *SetUpdateOne) Mutation() *SetMutation {
	return suo.mutation
}

// ClearPrintings clears all "printings" edges to the Printing entity.
func (suo *SetUpdateOne) ClearPrintings() *SetUpdateOne {
	suo.mutation.ClearPrintings()
	return suo
}

// RemovePrintingIDs removes the "printings" edge to Printing entities by IDs.
func (suo *SetUpdateOne) RemovePrintingIDs(ids ...int) *SetUpdateOne {
	suo.mutation.RemovePrintingIDs(ids...)
	return suo
}

// RemovePrintings removes "printings" edges to Printing entities.
func (suo *SetUpdateOne) RemovePrintings(p ...*Printing) *SetUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.RemovePrintingIDs(ids...)
}

// Where appends a list predicates to the SetUpdate builder.
func (suo *SetUpdateOne) Where(ps ...predicate.Set) *SetUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SetUpdateOne) Select(field string, fields ...string) *SetUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Set entity.
func (suo *SetUpdateOne) Save(ctx context.Context) (*Set, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SetUpdateOne) SaveX(ctx context.Context) *Set {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SetUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SetUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SetUpdateOne) check() error {
	if v, ok := suo.mutation.Name(); ok {
		if err := set.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`bones: validator failed for field "Set.name": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Code(); ok {
		if err := set.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`bones: validator failed for field "Set.code": %w`, err)}
		}
	}
	return nil
}

func (suo *SetUpdateOne) sqlSave(ctx context.Context) (_node *Set, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(set.Table, set.Columns, sqlgraph.NewFieldSpec(set.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`bones: missing "Set.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, set.FieldID)
		for _, f := range fields {
			if !set.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("bones: invalid field %q for query", f)}
			}
			if f != set.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(set.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Code(); ok {
		_spec.SetField(set.FieldCode, field.TypeString, value)
	}
	if suo.mutation.PrintingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   set.PrintingsTable,
			Columns: []string{set.PrintingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printing.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedPrintingsIDs(); len(nodes) > 0 && !suo.mutation.PrintingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   set.PrintingsTable,
			Columns: []string{set.PrintingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printing.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.PrintingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   set.PrintingsTable,
			Columns: []string{set.PrintingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printing.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Set{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{set.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
