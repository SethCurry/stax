// Code generated by ent, DO NOT EDIT.

package card

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/SethCurry/stax/internal/bones/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Card {
	return predicate.Card(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Card {
	return predicate.Card(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Card {
	return predicate.Card(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Card {
	return predicate.Card(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Card {
	return predicate.Card(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Card {
	return predicate.Card(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Card {
	return predicate.Card(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldName, v))
}

// OracleID applies equality check predicate on the "oracle_id" field. It's identical to OracleIDEQ.
func OracleID(v string) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldOracleID, v))
}

// ColorIdentity applies equality check predicate on the "color_identity" field. It's identical to ColorIdentityEQ.
func ColorIdentity(v uint8) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldColorIdentity, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Card {
	return predicate.Card(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Card {
	return predicate.Card(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Card {
	return predicate.Card(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Card {
	return predicate.Card(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Card {
	return predicate.Card(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Card {
	return predicate.Card(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Card {
	return predicate.Card(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Card {
	return predicate.Card(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Card {
	return predicate.Card(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Card {
	return predicate.Card(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Card {
	return predicate.Card(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Card {
	return predicate.Card(sql.FieldContainsFold(FieldName, v))
}

// OracleIDEQ applies the EQ predicate on the "oracle_id" field.
func OracleIDEQ(v string) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldOracleID, v))
}

// OracleIDNEQ applies the NEQ predicate on the "oracle_id" field.
func OracleIDNEQ(v string) predicate.Card {
	return predicate.Card(sql.FieldNEQ(FieldOracleID, v))
}

// OracleIDIn applies the In predicate on the "oracle_id" field.
func OracleIDIn(vs ...string) predicate.Card {
	return predicate.Card(sql.FieldIn(FieldOracleID, vs...))
}

// OracleIDNotIn applies the NotIn predicate on the "oracle_id" field.
func OracleIDNotIn(vs ...string) predicate.Card {
	return predicate.Card(sql.FieldNotIn(FieldOracleID, vs...))
}

// OracleIDGT applies the GT predicate on the "oracle_id" field.
func OracleIDGT(v string) predicate.Card {
	return predicate.Card(sql.FieldGT(FieldOracleID, v))
}

// OracleIDGTE applies the GTE predicate on the "oracle_id" field.
func OracleIDGTE(v string) predicate.Card {
	return predicate.Card(sql.FieldGTE(FieldOracleID, v))
}

// OracleIDLT applies the LT predicate on the "oracle_id" field.
func OracleIDLT(v string) predicate.Card {
	return predicate.Card(sql.FieldLT(FieldOracleID, v))
}

// OracleIDLTE applies the LTE predicate on the "oracle_id" field.
func OracleIDLTE(v string) predicate.Card {
	return predicate.Card(sql.FieldLTE(FieldOracleID, v))
}

// OracleIDContains applies the Contains predicate on the "oracle_id" field.
func OracleIDContains(v string) predicate.Card {
	return predicate.Card(sql.FieldContains(FieldOracleID, v))
}

// OracleIDHasPrefix applies the HasPrefix predicate on the "oracle_id" field.
func OracleIDHasPrefix(v string) predicate.Card {
	return predicate.Card(sql.FieldHasPrefix(FieldOracleID, v))
}

// OracleIDHasSuffix applies the HasSuffix predicate on the "oracle_id" field.
func OracleIDHasSuffix(v string) predicate.Card {
	return predicate.Card(sql.FieldHasSuffix(FieldOracleID, v))
}

// OracleIDEqualFold applies the EqualFold predicate on the "oracle_id" field.
func OracleIDEqualFold(v string) predicate.Card {
	return predicate.Card(sql.FieldEqualFold(FieldOracleID, v))
}

// OracleIDContainsFold applies the ContainsFold predicate on the "oracle_id" field.
func OracleIDContainsFold(v string) predicate.Card {
	return predicate.Card(sql.FieldContainsFold(FieldOracleID, v))
}

// ColorIdentityEQ applies the EQ predicate on the "color_identity" field.
func ColorIdentityEQ(v uint8) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldColorIdentity, v))
}

// ColorIdentityNEQ applies the NEQ predicate on the "color_identity" field.
func ColorIdentityNEQ(v uint8) predicate.Card {
	return predicate.Card(sql.FieldNEQ(FieldColorIdentity, v))
}

// ColorIdentityIn applies the In predicate on the "color_identity" field.
func ColorIdentityIn(vs ...uint8) predicate.Card {
	return predicate.Card(sql.FieldIn(FieldColorIdentity, vs...))
}

// ColorIdentityNotIn applies the NotIn predicate on the "color_identity" field.
func ColorIdentityNotIn(vs ...uint8) predicate.Card {
	return predicate.Card(sql.FieldNotIn(FieldColorIdentity, vs...))
}

// ColorIdentityGT applies the GT predicate on the "color_identity" field.
func ColorIdentityGT(v uint8) predicate.Card {
	return predicate.Card(sql.FieldGT(FieldColorIdentity, v))
}

// ColorIdentityGTE applies the GTE predicate on the "color_identity" field.
func ColorIdentityGTE(v uint8) predicate.Card {
	return predicate.Card(sql.FieldGTE(FieldColorIdentity, v))
}

// ColorIdentityLT applies the LT predicate on the "color_identity" field.
func ColorIdentityLT(v uint8) predicate.Card {
	return predicate.Card(sql.FieldLT(FieldColorIdentity, v))
}

// ColorIdentityLTE applies the LTE predicate on the "color_identity" field.
func ColorIdentityLTE(v uint8) predicate.Card {
	return predicate.Card(sql.FieldLTE(FieldColorIdentity, v))
}

// HasFaces applies the HasEdge predicate on the "faces" edge.
func HasFaces() predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, FacesTable, FacesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFacesWith applies the HasEdge predicate on the "faces" edge with a given conditions (other predicates).
func HasFacesWith(preds ...predicate.CardFace) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		step := newFacesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRulings applies the HasEdge predicate on the "rulings" edge.
func HasRulings() predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, RulingsTable, RulingsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRulingsWith applies the HasEdge predicate on the "rulings" edge with a given conditions (other predicates).
func HasRulingsWith(preds ...predicate.Ruling) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		step := newRulingsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Card) predicate.Card {
	return predicate.Card(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Card) predicate.Card {
	return predicate.Card(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Card) predicate.Card {
	return predicate.Card(sql.NotPredicates(p))
}
