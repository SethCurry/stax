// Code generated by ent, DO NOT EDIT.

package bones

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/SethCurry/stax/internal/bones/card"
	"github.com/SethCurry/stax/internal/bones/cardface"
)

// CardFace is the model entity for the CardFace schema.
type CardFace struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// FlavorText holds the value of the "flavor_text" field.
	FlavorText string `json:"flavor_text,omitempty"`
	// OracleText holds the value of the "oracle_text" field.
	OracleText string `json:"oracle_text,omitempty"`
	// Language holds the value of the "language" field.
	Language string `json:"language,omitempty"`
	// Cmc holds the value of the "cmc" field.
	Cmc float32 `json:"cmc,omitempty"`
	// Power holds the value of the "power" field.
	Power string `json:"power,omitempty"`
	// Toughness holds the value of the "toughness" field.
	Toughness string `json:"toughness,omitempty"`
	// Loyalty holds the value of the "loyalty" field.
	Loyalty string `json:"loyalty,omitempty"`
	// ManaCost holds the value of the "mana_cost" field.
	ManaCost string `json:"mana_cost,omitempty"`
	// TypeLine holds the value of the "type_line" field.
	TypeLine string `json:"type_line,omitempty"`
	// Colors holds the value of the "colors" field.
	Colors string `json:"colors,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CardFaceQuery when eager-loading is set.
	Edges          CardFaceEdges `json:"edges"`
	card_face_card *int
	selectValues   sql.SelectValues
}

// CardFaceEdges holds the relations/edges for other nodes in the graph.
type CardFaceEdges struct {
	// Card holds the value of the card edge.
	Card *Card `json:"card,omitempty"`
	// Printings holds the value of the printings edge.
	Printings []*Printing `json:"printings,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CardOrErr returns the Card value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CardFaceEdges) CardOrErr() (*Card, error) {
	if e.Card != nil {
		return e.Card, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: card.Label}
	}
	return nil, &NotLoadedError{edge: "card"}
}

// PrintingsOrErr returns the Printings value or an error if the edge
// was not loaded in eager-loading.
func (e CardFaceEdges) PrintingsOrErr() ([]*Printing, error) {
	if e.loadedTypes[1] {
		return e.Printings, nil
	}
	return nil, &NotLoadedError{edge: "printings"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CardFace) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case cardface.FieldCmc:
			values[i] = new(sql.NullFloat64)
		case cardface.FieldID:
			values[i] = new(sql.NullInt64)
		case cardface.FieldName, cardface.FieldFlavorText, cardface.FieldOracleText, cardface.FieldLanguage, cardface.FieldPower, cardface.FieldToughness, cardface.FieldLoyalty, cardface.FieldManaCost, cardface.FieldTypeLine, cardface.FieldColors:
			values[i] = new(sql.NullString)
		case cardface.ForeignKeys[0]: // card_face_card
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CardFace fields.
func (cf *CardFace) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cardface.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cf.ID = int(value.Int64)
		case cardface.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				cf.Name = value.String
			}
		case cardface.FieldFlavorText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field flavor_text", values[i])
			} else if value.Valid {
				cf.FlavorText = value.String
			}
		case cardface.FieldOracleText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field oracle_text", values[i])
			} else if value.Valid {
				cf.OracleText = value.String
			}
		case cardface.FieldLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language", values[i])
			} else if value.Valid {
				cf.Language = value.String
			}
		case cardface.FieldCmc:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field cmc", values[i])
			} else if value.Valid {
				cf.Cmc = float32(value.Float64)
			}
		case cardface.FieldPower:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field power", values[i])
			} else if value.Valid {
				cf.Power = value.String
			}
		case cardface.FieldToughness:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field toughness", values[i])
			} else if value.Valid {
				cf.Toughness = value.String
			}
		case cardface.FieldLoyalty:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field loyalty", values[i])
			} else if value.Valid {
				cf.Loyalty = value.String
			}
		case cardface.FieldManaCost:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mana_cost", values[i])
			} else if value.Valid {
				cf.ManaCost = value.String
			}
		case cardface.FieldTypeLine:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type_line", values[i])
			} else if value.Valid {
				cf.TypeLine = value.String
			}
		case cardface.FieldColors:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field colors", values[i])
			} else if value.Valid {
				cf.Colors = value.String
			}
		case cardface.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field card_face_card", value)
			} else if value.Valid {
				cf.card_face_card = new(int)
				*cf.card_face_card = int(value.Int64)
			}
		default:
			cf.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CardFace.
// This includes values selected through modifiers, order, etc.
func (cf *CardFace) Value(name string) (ent.Value, error) {
	return cf.selectValues.Get(name)
}

// QueryCard queries the "card" edge of the CardFace entity.
func (cf *CardFace) QueryCard() *CardQuery {
	return NewCardFaceClient(cf.config).QueryCard(cf)
}

// QueryPrintings queries the "printings" edge of the CardFace entity.
func (cf *CardFace) QueryPrintings() *PrintingQuery {
	return NewCardFaceClient(cf.config).QueryPrintings(cf)
}

// Update returns a builder for updating this CardFace.
// Note that you need to call CardFace.Unwrap() before calling this method if this CardFace
// was returned from a transaction, and the transaction was committed or rolled back.
func (cf *CardFace) Update() *CardFaceUpdateOne {
	return NewCardFaceClient(cf.config).UpdateOne(cf)
}

// Unwrap unwraps the CardFace entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cf *CardFace) Unwrap() *CardFace {
	_tx, ok := cf.config.driver.(*txDriver)
	if !ok {
		panic("bones: CardFace is not a transactional entity")
	}
	cf.config.driver = _tx.drv
	return cf
}

// String implements the fmt.Stringer.
func (cf *CardFace) String() string {
	var builder strings.Builder
	builder.WriteString("CardFace(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cf.ID))
	builder.WriteString("name=")
	builder.WriteString(cf.Name)
	builder.WriteString(", ")
	builder.WriteString("flavor_text=")
	builder.WriteString(cf.FlavorText)
	builder.WriteString(", ")
	builder.WriteString("oracle_text=")
	builder.WriteString(cf.OracleText)
	builder.WriteString(", ")
	builder.WriteString("language=")
	builder.WriteString(cf.Language)
	builder.WriteString(", ")
	builder.WriteString("cmc=")
	builder.WriteString(fmt.Sprintf("%v", cf.Cmc))
	builder.WriteString(", ")
	builder.WriteString("power=")
	builder.WriteString(cf.Power)
	builder.WriteString(", ")
	builder.WriteString("toughness=")
	builder.WriteString(cf.Toughness)
	builder.WriteString(", ")
	builder.WriteString("loyalty=")
	builder.WriteString(cf.Loyalty)
	builder.WriteString(", ")
	builder.WriteString("mana_cost=")
	builder.WriteString(cf.ManaCost)
	builder.WriteString(", ")
	builder.WriteString("type_line=")
	builder.WriteString(cf.TypeLine)
	builder.WriteString(", ")
	builder.WriteString("colors=")
	builder.WriteString(cf.Colors)
	builder.WriteByte(')')
	return builder.String()
}

// CardFaces is a parsable slice of CardFace.
type CardFaces []*CardFace
