// Code generated by ent, DO NOT EDIT.

package bones

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SethCurry/stax/internal/bones/artist"
	"github.com/SethCurry/stax/internal/bones/cardface"
	"github.com/SethCurry/stax/internal/bones/predicate"
	"github.com/SethCurry/stax/internal/bones/printing"
	"github.com/SethCurry/stax/internal/bones/printingimage"
	"github.com/SethCurry/stax/internal/bones/set"
)

// PrintingUpdate is the builder for updating Printing entities.
type PrintingUpdate struct {
	config
	hooks    []Hook
	mutation *PrintingMutation
}

// Where appends a list predicates to the PrintingUpdate builder.
func (pu *PrintingUpdate) Where(ps ...predicate.Printing) *PrintingUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetRarity sets the "rarity" field.
func (pu *PrintingUpdate) SetRarity(pr printing.Rarity) *PrintingUpdate {
	pu.mutation.SetRarity(pr)
	return pu
}

// SetNillableRarity sets the "rarity" field if the given value is not nil.
func (pu *PrintingUpdate) SetNillableRarity(pr *printing.Rarity) *PrintingUpdate {
	if pr != nil {
		pu.SetRarity(*pr)
	}
	return pu
}

// SetArtistID sets the "artist" edge to the Artist entity by ID.
func (pu *PrintingUpdate) SetArtistID(id int) *PrintingUpdate {
	pu.mutation.SetArtistID(id)
	return pu
}

// SetNillableArtistID sets the "artist" edge to the Artist entity by ID if the given value is not nil.
func (pu *PrintingUpdate) SetNillableArtistID(id *int) *PrintingUpdate {
	if id != nil {
		pu = pu.SetArtistID(*id)
	}
	return pu
}

// SetArtist sets the "artist" edge to the Artist entity.
func (pu *PrintingUpdate) SetArtist(a *Artist) *PrintingUpdate {
	return pu.SetArtistID(a.ID)
}

// SetSetID sets the "set" edge to the Set entity by ID.
func (pu *PrintingUpdate) SetSetID(id int) *PrintingUpdate {
	pu.mutation.SetSetID(id)
	return pu
}

// SetNillableSetID sets the "set" edge to the Set entity by ID if the given value is not nil.
func (pu *PrintingUpdate) SetNillableSetID(id *int) *PrintingUpdate {
	if id != nil {
		pu = pu.SetSetID(*id)
	}
	return pu
}

// SetSet sets the "set" edge to the Set entity.
func (pu *PrintingUpdate) SetSet(s *Set) *PrintingUpdate {
	return pu.SetSetID(s.ID)
}

// SetCardFaceID sets the "card_face" edge to the CardFace entity by ID.
func (pu *PrintingUpdate) SetCardFaceID(id int) *PrintingUpdate {
	pu.mutation.SetCardFaceID(id)
	return pu
}

// SetNillableCardFaceID sets the "card_face" edge to the CardFace entity by ID if the given value is not nil.
func (pu *PrintingUpdate) SetNillableCardFaceID(id *int) *PrintingUpdate {
	if id != nil {
		pu = pu.SetCardFaceID(*id)
	}
	return pu
}

// SetCardFace sets the "card_face" edge to the CardFace entity.
func (pu *PrintingUpdate) SetCardFace(c *CardFace) *PrintingUpdate {
	return pu.SetCardFaceID(c.ID)
}

// AddImageIDs adds the "images" edge to the PrintingImage entity by IDs.
func (pu *PrintingUpdate) AddImageIDs(ids ...int) *PrintingUpdate {
	pu.mutation.AddImageIDs(ids...)
	return pu
}

// AddImages adds the "images" edges to the PrintingImage entity.
func (pu *PrintingUpdate) AddImages(p ...*PrintingImage) *PrintingUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddImageIDs(ids...)
}

// Mutation returns the PrintingMutation object of the builder.
func (pu *PrintingUpdate) Mutation() *PrintingMutation {
	return pu.mutation
}

// ClearArtist clears the "artist" edge to the Artist entity.
func (pu *PrintingUpdate) ClearArtist() *PrintingUpdate {
	pu.mutation.ClearArtist()
	return pu
}

// ClearSet clears the "set" edge to the Set entity.
func (pu *PrintingUpdate) ClearSet() *PrintingUpdate {
	pu.mutation.ClearSet()
	return pu
}

// ClearCardFace clears the "card_face" edge to the CardFace entity.
func (pu *PrintingUpdate) ClearCardFace() *PrintingUpdate {
	pu.mutation.ClearCardFace()
	return pu
}

// ClearImages clears all "images" edges to the PrintingImage entity.
func (pu *PrintingUpdate) ClearImages() *PrintingUpdate {
	pu.mutation.ClearImages()
	return pu
}

// RemoveImageIDs removes the "images" edge to PrintingImage entities by IDs.
func (pu *PrintingUpdate) RemoveImageIDs(ids ...int) *PrintingUpdate {
	pu.mutation.RemoveImageIDs(ids...)
	return pu
}

// RemoveImages removes "images" edges to PrintingImage entities.
func (pu *PrintingUpdate) RemoveImages(p ...*PrintingImage) *PrintingUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveImageIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PrintingUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PrintingUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PrintingUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PrintingUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PrintingUpdate) check() error {
	if v, ok := pu.mutation.Rarity(); ok {
		if err := printing.RarityValidator(v); err != nil {
			return &ValidationError{Name: "rarity", err: fmt.Errorf(`bones: validator failed for field "Printing.rarity": %w`, err)}
		}
	}
	return nil
}

func (pu *PrintingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(printing.Table, printing.Columns, sqlgraph.NewFieldSpec(printing.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Rarity(); ok {
		_spec.SetField(printing.FieldRarity, field.TypeEnum, value)
	}
	if pu.mutation.ArtistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   printing.ArtistTable,
			Columns: []string{printing.ArtistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artist.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ArtistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   printing.ArtistTable,
			Columns: []string{printing.ArtistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.SetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   printing.SetTable,
			Columns: []string{printing.SetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(set.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.SetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   printing.SetTable,
			Columns: []string{printing.SetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(set.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.CardFaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   printing.CardFaceTable,
			Columns: []string{printing.CardFaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cardface.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CardFaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   printing.CardFaceTable,
			Columns: []string{printing.CardFaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cardface.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   printing.ImagesTable,
			Columns: []string{printing.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printingimage.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedImagesIDs(); len(nodes) > 0 && !pu.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   printing.ImagesTable,
			Columns: []string{printing.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printingimage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   printing.ImagesTable,
			Columns: []string{printing.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printingimage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{printing.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PrintingUpdateOne is the builder for updating a single Printing entity.
type PrintingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PrintingMutation
}

// SetRarity sets the "rarity" field.
func (puo *PrintingUpdateOne) SetRarity(pr printing.Rarity) *PrintingUpdateOne {
	puo.mutation.SetRarity(pr)
	return puo
}

// SetNillableRarity sets the "rarity" field if the given value is not nil.
func (puo *PrintingUpdateOne) SetNillableRarity(pr *printing.Rarity) *PrintingUpdateOne {
	if pr != nil {
		puo.SetRarity(*pr)
	}
	return puo
}

// SetArtistID sets the "artist" edge to the Artist entity by ID.
func (puo *PrintingUpdateOne) SetArtistID(id int) *PrintingUpdateOne {
	puo.mutation.SetArtistID(id)
	return puo
}

// SetNillableArtistID sets the "artist" edge to the Artist entity by ID if the given value is not nil.
func (puo *PrintingUpdateOne) SetNillableArtistID(id *int) *PrintingUpdateOne {
	if id != nil {
		puo = puo.SetArtistID(*id)
	}
	return puo
}

// SetArtist sets the "artist" edge to the Artist entity.
func (puo *PrintingUpdateOne) SetArtist(a *Artist) *PrintingUpdateOne {
	return puo.SetArtistID(a.ID)
}

// SetSetID sets the "set" edge to the Set entity by ID.
func (puo *PrintingUpdateOne) SetSetID(id int) *PrintingUpdateOne {
	puo.mutation.SetSetID(id)
	return puo
}

// SetNillableSetID sets the "set" edge to the Set entity by ID if the given value is not nil.
func (puo *PrintingUpdateOne) SetNillableSetID(id *int) *PrintingUpdateOne {
	if id != nil {
		puo = puo.SetSetID(*id)
	}
	return puo
}

// SetSet sets the "set" edge to the Set entity.
func (puo *PrintingUpdateOne) SetSet(s *Set) *PrintingUpdateOne {
	return puo.SetSetID(s.ID)
}

// SetCardFaceID sets the "card_face" edge to the CardFace entity by ID.
func (puo *PrintingUpdateOne) SetCardFaceID(id int) *PrintingUpdateOne {
	puo.mutation.SetCardFaceID(id)
	return puo
}

// SetNillableCardFaceID sets the "card_face" edge to the CardFace entity by ID if the given value is not nil.
func (puo *PrintingUpdateOne) SetNillableCardFaceID(id *int) *PrintingUpdateOne {
	if id != nil {
		puo = puo.SetCardFaceID(*id)
	}
	return puo
}

// SetCardFace sets the "card_face" edge to the CardFace entity.
func (puo *PrintingUpdateOne) SetCardFace(c *CardFace) *PrintingUpdateOne {
	return puo.SetCardFaceID(c.ID)
}

// AddImageIDs adds the "images" edge to the PrintingImage entity by IDs.
func (puo *PrintingUpdateOne) AddImageIDs(ids ...int) *PrintingUpdateOne {
	puo.mutation.AddImageIDs(ids...)
	return puo
}

// AddImages adds the "images" edges to the PrintingImage entity.
func (puo *PrintingUpdateOne) AddImages(p ...*PrintingImage) *PrintingUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddImageIDs(ids...)
}

// Mutation returns the PrintingMutation object of the builder.
func (puo *PrintingUpdateOne) Mutation() *PrintingMutation {
	return puo.mutation
}

// ClearArtist clears the "artist" edge to the Artist entity.
func (puo *PrintingUpdateOne) ClearArtist() *PrintingUpdateOne {
	puo.mutation.ClearArtist()
	return puo
}

// ClearSet clears the "set" edge to the Set entity.
func (puo *PrintingUpdateOne) ClearSet() *PrintingUpdateOne {
	puo.mutation.ClearSet()
	return puo
}

// ClearCardFace clears the "card_face" edge to the CardFace entity.
func (puo *PrintingUpdateOne) ClearCardFace() *PrintingUpdateOne {
	puo.mutation.ClearCardFace()
	return puo
}

// ClearImages clears all "images" edges to the PrintingImage entity.
func (puo *PrintingUpdateOne) ClearImages() *PrintingUpdateOne {
	puo.mutation.ClearImages()
	return puo
}

// RemoveImageIDs removes the "images" edge to PrintingImage entities by IDs.
func (puo *PrintingUpdateOne) RemoveImageIDs(ids ...int) *PrintingUpdateOne {
	puo.mutation.RemoveImageIDs(ids...)
	return puo
}

// RemoveImages removes "images" edges to PrintingImage entities.
func (puo *PrintingUpdateOne) RemoveImages(p ...*PrintingImage) *PrintingUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveImageIDs(ids...)
}

// Where appends a list predicates to the PrintingUpdate builder.
func (puo *PrintingUpdateOne) Where(ps ...predicate.Printing) *PrintingUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PrintingUpdateOne) Select(field string, fields ...string) *PrintingUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Printing entity.
func (puo *PrintingUpdateOne) Save(ctx context.Context) (*Printing, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PrintingUpdateOne) SaveX(ctx context.Context) *Printing {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PrintingUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PrintingUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PrintingUpdateOne) check() error {
	if v, ok := puo.mutation.Rarity(); ok {
		if err := printing.RarityValidator(v); err != nil {
			return &ValidationError{Name: "rarity", err: fmt.Errorf(`bones: validator failed for field "Printing.rarity": %w`, err)}
		}
	}
	return nil
}

func (puo *PrintingUpdateOne) sqlSave(ctx context.Context) (_node *Printing, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(printing.Table, printing.Columns, sqlgraph.NewFieldSpec(printing.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`bones: missing "Printing.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, printing.FieldID)
		for _, f := range fields {
			if !printing.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("bones: invalid field %q for query", f)}
			}
			if f != printing.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Rarity(); ok {
		_spec.SetField(printing.FieldRarity, field.TypeEnum, value)
	}
	if puo.mutation.ArtistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   printing.ArtistTable,
			Columns: []string{printing.ArtistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artist.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ArtistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   printing.ArtistTable,
			Columns: []string{printing.ArtistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.SetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   printing.SetTable,
			Columns: []string{printing.SetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(set.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.SetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   printing.SetTable,
			Columns: []string{printing.SetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(set.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.CardFaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   printing.CardFaceTable,
			Columns: []string{printing.CardFaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cardface.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CardFaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   printing.CardFaceTable,
			Columns: []string{printing.CardFaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cardface.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   printing.ImagesTable,
			Columns: []string{printing.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printingimage.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedImagesIDs(); len(nodes) > 0 && !puo.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   printing.ImagesTable,
			Columns: []string{printing.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printingimage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   printing.ImagesTable,
			Columns: []string{printing.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printingimage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Printing{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{printing.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
